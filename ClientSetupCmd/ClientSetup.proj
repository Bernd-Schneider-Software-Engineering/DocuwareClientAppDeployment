<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" InitialTargets="_InitMachineProperties;_GetModulesInstallState;_InitDefaultParameterValues;_ParameterValidation;_ParameterInfo" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!--
  Phase_SystemChange
    Container Phase to start the following phases exactly as ordered here:
      Phase_SystemPrepare;Phase_Download;Phase_Stop;Phase_Uninstall;Phase_Install;Phase_Start;Phase_Postprocessing
    This phase is used for install, uninstall and modify.
    
  Phase_SystemUpdate
    Container Phase to start the following phases exactly as ordered here:
      Phase_SystemPrepare;Phase_UpdatePrepare;Phase_Download;Phase_Stop;Phase_Uninstall;Phase_Install;Phase_Start;Phase_Postprocessing
    This phase is used for update.
    
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  The phases called from the container phases are executing the following tasks:
  
    Phase_VerifySystemRequirements 
      - pre check Main Memory,...
      - General disk Space Check just to verify if some disk space is available
    
    Phase_SystemPrepare
      - Check the required Disk Space based on the module selection
      - Removed retired modules if needed
    
    Phase_UpdatePrepare
      - create a "ToDo" list of modules which need a release or minor update
  
    Phase_Download
      1. - Download External Prerequisites
      2. - Download Internal Prerequisites (Desktop Framework, OCR)
      3. - Download Module Packages
  
    Phase_Install
      Sub-Phases:
        1. - Install External Prerequisites
        2. - Deploy
          2.1. - Deploy internal Prerequisites
          2.2. - Deploy Module Packages
        3. - Init
          3.1. - Init internal Prerequisites
          3.2. - Init Module Packages
  
    Phase_Uninstall
      Sub-Phases:
        1. - Uninit
          1.1. - Uninit Module Package
          1.2. - Uninit internal Prerequisites
        2. - UnDeploy
          2.1. - UnDeploy Module Package
          2.2. - UnDeploy internal Prerequisites
  
    Phase_Stop
      - Stop DocuWare Update Process
      - Stop DWClientUpdateService
      - Stop Desktop (Service and Application) if needed (if install and if a module install or uninstall or update requires this)
      - Stop LocalDataConnector Service iff needed (on install, uninstall and update)
      - Stop local installed client apps
  
    Phase_Start
      - Start Desktop (Service and Application) if Desktop is available
      - Start LocalDataConnector Service if available
      - Start DWClientUpdateService
  
    Phase_Postprocessing
      - Clean Download directory for MSI files and prerequisites
  
  -->
    <!--
        Phase_SystemChange
        Phase_SystemUpdate
        
        
        Phase_VerifySystemRequirements,
        Phase_SystemPrepare,
        Phase_UpdatePrepare,
        Phase_Download,
        Phase_Install,
        Phase_Uninstall,
        Phase_Stop,
        Phase_Start,
        Phase_Postprocessing,
		
		Phase_OfflineUninstall
  -->

    <!--Client setup MSBuild dll-->
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="DownloadMSI" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="DownloadPrerequisites" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="UninstallModule" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="SetModuleVersion" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="SetSettingsPath" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="CheckForUpdateMode" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="RequiredDiskSpaceCalc" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="GetMsiUrl" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="ModuleServerVersion" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="CreateAdminToolSettingFile" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="MergeAdminToolSettingFile" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="ModuleIsInstalled" />
    <UsingTask AssemblyFile="DocuWare.Setup.Client.MSBuild.dll" TaskName="DigitalPrerequisiteSignatureVerification" />

    <!--Common setup MSBuild dll-->
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="SmartExec" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="GetOSInfo" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="GetComputerInfo" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="DWMessage" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="ShortcutHandler"/>
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="WindowsServiceHandling" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="EnsureProcessIsTerminated" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="PrerequisiteInstallState" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="ApplicationTerminator" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="CheckForTerminalServer" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="GetRebootRequired" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="GetProcessorInfo" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="LocalMsiVersion" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="VersionCompare" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="MSIVersionFromDB" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="IsProcessRunning" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="NetRuntimeInstaller" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="DigitalFileSignatureVerification" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="ThumbprintVerification" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="GetThumbprintString" />
    <UsingTask AssemblyFile="DocuWare.Setup.Common.MSBuild.dll" TaskName="WebView2RuntimeInstaller" />


    <PropertyGroup>
        <Schtasks>$(systemroot)\system32\schtasks.exe </Schtasks>
        <Systeminfo>$(systemroot)\system32\systeminfo.exe</Systeminfo>
        <MSIExec>$(systemroot)\system32\msiexec.exe</MSIExec>
        <SC>$(systemroot)\system32\sc.exe</SC>
        <Tasklist>$(systemroot)\system32\tasklist.exe</Tasklist>
        <Icacls>$(systemroot)\system32\icacls.exe</Icacls>
        <Regsvr>$(systemroot)\system32\regsvr32.exe</Regsvr>
        <Netsh>$(systemroot)\system32\netsh.exe</Netsh>
        <Reg>$(systemroot)\system32\reg.exe</Reg>
        <Certutil>$(systemroot)\system32\certutil.exe</Certutil>
    </PropertyGroup>

    <Target Name="_ParameterInfo">
        <ItemGroup>
            <Parameters Include="ClientSetupDir=$(ClientSetupDir)" />
            <Parameters Include="ClientSetupLogsDirectory=$(ClientSetupLogsDirectory)" />
            <Parameters Include="C2Outlook=$(C2Outlook)" />
            <Parameters Include="EditSend=$(EditSend)" />
            <Parameters Include="AdminTool=$(AdminTool)" />
            <Parameters Include="Scanner=$(Scanner)" />
            <Parameters Include="Export=$(Export)" />
            <Parameters Include="Import=$(Import)" />
            <Parameters Include="Printer=$(Printer)" />
            <Parameters Include="SmartConnect=$(SmartConnect)" />
            <Parameters Include="WEC=$(WEC)" />
            <Parameters Include="WorkflowDesigner=$(WorkflowDesigner)" />
            <Parameters Include="UrlCreator=$(UrlCreator)" />
            <Parameters Include="LocalDataConnector=$(LocalDataConnector)" />
            <Parameters Include="UserSynchronization=$(UserSynchronization)" />
            <Parameters Include="Update=$(Update)" />
            <Parameters Include="BundleUpdate=$(BundleUpdate)" />
            <Parameters Include="SettingsPath=$(SettingsPath)"/>
            <Parameters Include="ClientSetupVersion=$(ClientSetupVersion)"/>
            <Parameters Include="IsCommandLine=$(IsCommandLine)"/>
            <Parameters Include="IsOffline=$(IsOffline)"/>
            <Parameters Include="CurrentInstallStateRetiredIndexCleaner=$(CurrentInstallStateRetiredIndexCleaner)"/>
            <Parameters Include="CurrentInstallStateRetiredC2Toshiba=$(CurrentInstallStateRetiredC2Toshiba)"/>
            <Parameters Include="CurrentInstallStateRetiredUploadService=$(CurrentInstallStateRetiredUploadService)"/>
            <Parameters Include="CurrentInstallStateRetiredCommonOCR=$(CurrentInstallStateRetiredCommonOCR)"/>
            <Parameters Include="CurrentInstallStateRetiredAdminTool=$(CurrentInstallStateRetiredAdminTool)"/>
            <Parameters Include="CurrentInstallStateRetiredC2Outlook=$(CurrentInstallStateRetiredC2Outlook)"/>
            <Parameters Include="CurrentInstallStateRetiredDesktop=$(CurrentInstallStateRetiredDesktop)"/>
            <Parameters Include="CurrentInstallStateRetiredUpdate=$(CurrentInstallStateRetiredUpdate)"/>
            <Parameters Include="CurrentInstallStateRetiredWEC=$(CurrentInstallStateRetiredWEC)"/>
            <Parameters Include="CurrentInstallStateRetiredWorkflowDesigner=$(CurrentInstallStateRetiredWorkflowDesigner)"/>
            <Parameters Include="CurrentInstallStateDesktopFramework=$(CurrentInstallStateDesktopFramework)" />
            <Parameters Include="CurrentInstallStateClientOCR=$(CurrentInstallStateClientOCR)" />
            <Parameters Include="CurrentInstallStateUpdate=$(CurrentInstallStateUpdate)" />
            <Parameters Include="CurrentInstallStateC2Outlook=$(CurrentInstallStateC2Outlook)" />
            <Parameters Include="CurrentInstallStateEditSend=$(CurrentInstallStateEditSend)" />
            <Parameters Include="CurrentInstallStateAdminTool=$(CurrentInstallStateAdminTool)" />
            <Parameters Include="CurrentInstallStateScanner=$(CurrentInstallStateScanner)" />
            <Parameters Include="CurrentInstallStateExport=$(CurrentInstallStateExport)" />
            <Parameters Include="CurrentInstallStateImport=$(CurrentInstallStateImport)" />
            <Parameters Include="CurrentInstallStatePrinter=$(CurrentInstallStatePrinter)" />
            <Parameters Include="CurrentInstallStateSmartConnect=$(CurrentInstallStateSmartConnect)" />
            <Parameters Include="CurrentInstallStateWEC=$(CurrentInstallStateWEC)" />
            <Parameters Include="CurrentInstallStateWECServer=$(CurrentInstallStateWECServer)" />
            <Parameters Include="CurrentInstallStateWorkflowDesigner=$(CurrentInstallStateWorkflowDesigner)" />
            <Parameters Include="CurrentInstallStateUrlCreator=$(CurrentInstallStateUrlCreator)" />
            <Parameters Include="CurrentInstallStateLocalDataConnector=$(CurrentInstallStateLocalDataConnector)" />
            <Parameters Include="CurrentInstallStateUserSynchronization=$(CurrentInstallStateUserSynchronization)" />
            <Parameters Include="InstalledVersionDesktopFramework=$(InstalledVersionDesktopFramework)" />
            <Parameters Include="InstalledVersionClientOCR=$(InstalledVersionClientOCR)" />
            <Parameters Include="InstalledVersionUpdate=$(InstalledVersionUpdate)" />
            <Parameters Include="InstalledVersionC2Outlook=$(InstalledVersionC2Outlook)" />
            <Parameters Include="InstalledVersionEditSend=$(InstalledVersionEditSend)" />
            <Parameters Include="InstalledVersionAdminTool=$(InstalledVersionAdminTool)" />
            <Parameters Include="InstalledVersionScanner=$(InstalledVersionScanner)" />
            <Parameters Include="InstalledVersionExport=$(InstalledVersionExport)" />
            <Parameters Include="InstalledVersionImport=$(InstalledVersionImport)" />
            <Parameters Include="InstalledVersionPrinter=$(InstalledVersionPrinter)" />
            <Parameters Include="InstalledVersionSmartConnect=$(InstalledVersionSmartConnect)" />
            <Parameters Include="InstalledVersionWEC=$(InstalledVersionWEC)" />
            <Parameters Include="InstalledVersionWECServer=$(InstalledVersionWECServer)" />
            <Parameters Include="InstalledVersionWorkflowDesigner=$(InstalledVersionWorkflowDesigner)" />
            <Parameters Include="InstalledVersionUrlCreator=$(InstalledVersionUrlCreator)" />
            <Parameters Include="InstalledVersionLocalDataConnector=$(InstalledVersionLocalDataConnector)" />
            <Parameters Include="InstalledVersionUserSynchronization=$(InstalledVersionUserSynchronization)" />
            <Parameters Include="ServerVersionDesktopFramework=$(ServerVersionDesktopFramework)" />
            <Parameters Include="ServerVersionClientOCR=$(ServerVersionClientOCR)" />
            <Parameters Include="ServerVersionUpdate=$(ServerVersionUpdate)" />
            <Parameters Include="ServerVersionC2Outlook=$(ServerVersionC2Outlook)" />
            <Parameters Include="ServerVersionEditSend=$(ServerVersionEditSend)" />
            <Parameters Include="ServerVersionAdminTool=$(ServerVersionAdminTool)" />
            <Parameters Include="ServerVersionScanner=$(ServerVersionScanner)" />
            <Parameters Include="ServerVersionExport=$(ServerVersionExport)" />
            <Parameters Include="ServerVersionImport=$(ServerVersionImport)" />
            <Parameters Include="ServerVersionPrinter=$(ServerVersionPrinter)" />
            <Parameters Include="ServerVersionSmartConnect=$(ServerVersionSmartConnect)" />
            <Parameters Include="ServerVersionWEC=$(ServerVersionWEC)" />
            <Parameters Include="ServerVersionWECServer=$(ServerVersionWECServer)" />
            <Parameters Include="ServerVersionWorkflowDesigner=$(ServerVersionWorkflowDesigner)" />
            <Parameters Include="ServerVersionUrlCreator=$(ServerVersionUrlCreator)" />
            <Parameters Include="ServerVersionLocalDataConnector=$(ServerVersionLocalDataConnector)" />
            <Parameters Include="ServerVersionUserSynchronization=$(ServerVersionUserSynchronization)" />
            <Parameters Include="PublicDesktopFolder=$(PublicDesktopFolder)" />
            <Parameters Include="ExportIsRunning=$(ExportIsRunning)" />
            <Parameters Include="IsBackgroundUpdate=$(IsBackgroundUpdate)" />
        </ItemGroup>
        <Message Text="Parameter: %(Parameters.Identity)" />
    </Target>

    <Target Name="_ParameterValidation">
        <!--<Prepared for validation"" />-->
        <Error Text="SettingsPath variable was not provided and not found in the Registry." Condition="'$(SettingsPath)'==''" />
    </Target>

    <PropertyGroup>
        <AppCmdStopAppPoolSuccessExitCodes>0;50;1062;1168</AppCmdStopAppPoolSuccessExitCodes>
        <AppCmdStartAppPoolSuccessExitCodes>0;1062;1168</AppCmdStartAppPoolSuccessExitCodes>
        <AppCmdAddAppPoolSuccessExitCodes>0;183</AppCmdAddAppPoolSuccessExitCodes>
        <AppCmdAddAppSuccessExitCodes>0;183</AppCmdAddAppSuccessExitCodes>
        <AppCmdAddVdirSuccessExitCodes>0;183</AppCmdAddVdirSuccessExitCodes>
        <AppCmdDeleteAppPoolSuccessExitCodes>0;1168</AppCmdDeleteAppPoolSuccessExitCodes>
        <AppCmdDeleteAppSuccessExitCodes>0;50;1168</AppCmdDeleteAppSuccessExitCodes>
        <AppCmdDeleteVdirSuccessExitCodes>0;50;1168</AppCmdDeleteVdirSuccessExitCodes>
        <NetStopSuccessExitCodes>0;2</NetStopSuccessExitCodes>
        <ScStopSuccessExitCodes>0;1060;1062</ScStopSuccessExitCodes>
        <ScDeleteSuccessExitCodes>0;1060</ScDeleteSuccessExitCodes>
        <ScCreateSuccessExitCodes>0;1073</ScCreateSuccessExitCodes>
        <SchtasksSuccessExitCodes>0</SchtasksSuccessExitCodes>
        <SchtasksUninstallSuccessExitCodes>0;1</SchtasksUninstallSuccessExitCodes>
        <DismSuccessExitCodes>0;3010</DismSuccessExitCodes>
        <MSISuccessExitCodes>0;3010</MSISuccessExitCodes>
        <InstallPrerequisitesSuccessExitCodes>0;1638;3010</InstallPrerequisitesSuccessExitCodes>
        <MkDirSuccessExitCodes>0;1;183</MkDirSuccessExitCodes>
        <RegDeleteSuccessExitCodes>0;1</RegDeleteSuccessExitCodes>
        <NetshDeleteSuccessExitCodes>0;1</NetshDeleteSuccessExitCodes>
        <RegisterExtensionDotNet40SuccessExitCodes>0</RegisterExtensionDotNet40SuccessExitCodes>
        <RegsvrSuccessExitCodes>0</RegsvrSuccessExitCodes>
        <RegisterWEClientExitCodes>0</RegisterWEClientExitCodes>
    </PropertyGroup>

    <Target Name="_InitMachineProperties">
        <GetOSInfo>
            <Output TaskParameter="IsServerOS" PropertyName="IsServerOS" />
            <Output TaskParameter="IsDomainController" PropertyName="IsDomainController" />
            <Output TaskParameter="Is64bitOS" PropertyName="Is64bitOS" />
            <Output TaskParameter="OSVersion" PropertyName="OSVersion" />
            <Output TaskParameter="OSVersionInt" PropertyName="OSVersionInt" />
            <Output TaskParameter="IsOSBuildNumberWhitelisted" PropertyName="IsOSBuildNumberWhitelisted" />
            <Output TaskParameter="OSVersionFull" PropertyName="OSVersionFull" />
            <Output TaskParameter="OSServicePack" PropertyName="OSServicePack" />
        </GetOSInfo>
        <CheckForTerminalServer>
            <Output TaskParameter="IsTerminalServer" PropertyName="IsTerminalServer" />
        </CheckForTerminalServer>
        <GetProcessorInfo>
            <Output TaskParameter="CPUCores" PropertyName="CPUCores" />
            <Output TaskParameter="CoreMHz" PropertyName="CoreMHz" />
        </GetProcessorInfo>
        <Message Text="Operating System Information:"></Message>
        <Message Text="  Version: $(OSVersion)"></Message>
        <Message Text="  Version (int): $(OSVersionInt)"></Message>
        <Message Text="  Version (full): $(OSVersionFull)"></Message>
        <Message Text="  ServicePack: $(OSServicePack)"></Message>
        <Message Text="  IsServerOS: $(IsServerOS)"></Message>
        <Message Text="  IsDomainController: $(IsDomainController)"></Message>
        <Message Text="  Program files path: $(ProgramW6432)"></Message>
        <Message Text="  Program files (32 bit) path: $(ProgramFiles)"></Message>
        <Message Text="  IsTerminalServer: $(IsTerminalServer)"></Message>
        <GetComputerInfo>
            <Output TaskParameter="TotalMainMemoryMB" PropertyName="TotalMainMemoryMB" />
            <Output TaskParameter="FreeSystemDriveMemoryMB" PropertyName="FreeDiskMemoryMB" />
        </GetComputerInfo>
        <Message Text="Computer Information:"></Message>
        <Message Text="  TotalMainMemoryMB: $(TotalMainMemoryMB)"></Message>
        <Message Text="  FreeSystemDriveMemoryMB: $(FreeDiskMemoryMB)"></Message>
        <Message Text="  CPUCores: $(CPUCores)"></Message>
        <Message Text="  CoreMHz: $(CoreMHz)"></Message>
        <ItemGroup>
            <Parameters Include="IsOffline=$(IsOffline)"/>
        </ItemGroup>
    </Target>

    <Target Name="_GetModulesInstallState">
        <!-- Currently Supported Modules -->
        <PropertyGroup>
            <InstalledVersionDesktopFramework Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.Desktop.msi)</InstalledVersionDesktopFramework>
            <InstalledVersionDesktopFramework Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.Desktop.msi)</InstalledVersionDesktopFramework>
            <CurrentInstallStateDesktopFramework Condition="'$(InstalledVersionDesktopFramework)'!=''">True</CurrentInstallStateDesktopFramework>
            <CurrentInstallStateDesktopFramework Condition="'$(InstalledVersionDesktopFramework)'==''">False</CurrentInstallStateDesktopFramework>
            <InstalledVersionClientOCR Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.ClientOCR.msi)</InstalledVersionClientOCR>
            <InstalledVersionClientOCR Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.ClientOCR.msi)</InstalledVersionClientOCR>
            <CurrentInstallStateClientOCR Condition="'$(InstalledVersionClientOCR)'!=''">True</CurrentInstallStateClientOCR>
            <CurrentInstallStateClientOCR Condition="'$(InstalledVersionClientOCR)'==''">False</CurrentInstallStateClientOCR>
            <InstalledVersionUpdate Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.Update.msi)</InstalledVersionUpdate>
            <InstalledVersionUpdate Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.Update.msi)</InstalledVersionUpdate>
            <CurrentInstallStateUpdate Condition="'$(InstalledVersionUpdate)'!=''">True</CurrentInstallStateUpdate>
            <CurrentInstallStateUpdate Condition="'$(InstalledVersionUpdate)'==''">False</CurrentInstallStateUpdate>
            <InstalledVersionC2Outlook Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.ConnectToOutlook.msi)</InstalledVersionC2Outlook>
            <InstalledVersionC2Outlook Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.ConnectToOutlook.msi)</InstalledVersionC2Outlook>
            <CurrentInstallStateC2Outlook Condition="'$(InstalledVersionC2Outlook)'!=''">True</CurrentInstallStateC2Outlook>
            <CurrentInstallStateC2Outlook Condition="'$(InstalledVersionC2Outlook)'==''">False</CurrentInstallStateC2Outlook>
            <InstalledVersionEditSend Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.Desktop.EditSend.msi)</InstalledVersionEditSend>
            <InstalledVersionEditSend Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.Desktop.EditSend.msi)</InstalledVersionEditSend>
            <CurrentInstallStateEditSend Condition="'$(InstalledVersionEditSend)'!=''">True</CurrentInstallStateEditSend>
            <CurrentInstallStateEditSend Condition="'$(InstalledVersionEditSend)'==''">False</CurrentInstallStateEditSend>
            <InstalledVersionAdminTool Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.AdministrationOnline.msi)</InstalledVersionAdminTool>
            <InstalledVersionAdminTool Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.AdministrationOnline.msi)</InstalledVersionAdminTool>
            <CurrentInstallStateAdminTool Condition="'$(InstalledVersionAdminTool)'!=''">True</CurrentInstallStateAdminTool>
            <CurrentInstallStateAdminTool Condition="'$(InstalledVersionAdminTool)'==''">False</CurrentInstallStateAdminTool>
            <InstalledVersionScanner Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.Desktop.Scanner.msi)</InstalledVersionScanner>
            <InstalledVersionScanner Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.Desktop.Scanner.msi)</InstalledVersionScanner>
            <CurrentInstallStateScanner Condition="'$(InstalledVersionScanner)'!=''">True</CurrentInstallStateScanner>
            <CurrentInstallStateScanner Condition="'$(InstalledVersionScanner)'==''">False</CurrentInstallStateScanner>
            <InstalledVersionExport Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.Export.msi)</InstalledVersionExport>
            <InstalledVersionExport Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.Export.msi)</InstalledVersionExport>
            <CurrentInstallStateExport Condition="'$(InstalledVersionExport)'!=''">True</CurrentInstallStateExport>
            <CurrentInstallStateExport Condition="'$(InstalledVersionExport)'==''">False</CurrentInstallStateExport>
            <InstalledVersionImport Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.Desktop.Import.msi)</InstalledVersionImport>
            <InstalledVersionImport Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.Desktop.Import.msi)</InstalledVersionImport>
            <CurrentInstallStateImport Condition="'$(InstalledVersionImport)'!=''">True</CurrentInstallStateImport>
            <CurrentInstallStateImport Condition="'$(InstalledVersionImport)'==''">False</CurrentInstallStateImport>
            <InstalledVersionPrinter Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.Desktop.Printer.msi)</InstalledVersionPrinter>
            <InstalledVersionPrinter Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.Desktop.Printer.msi)</InstalledVersionPrinter>
            <CurrentInstallStatePrinter Condition="'$(InstalledVersionPrinter)'!=''">True</CurrentInstallStatePrinter>
            <CurrentInstallStatePrinter Condition="'$(InstalledVersionPrinter)'==''">False</CurrentInstallStatePrinter>
            <InstalledVersionSmartConnect Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.Desktop.SmartConnect.msi)</InstalledVersionSmartConnect>
            <InstalledVersionSmartConnect Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.Desktop.SmartConnect.msi)</InstalledVersionSmartConnect>
            <CurrentInstallStateSmartConnect Condition="'$(InstalledVersionSmartConnect)'!=''">True</CurrentInstallStateSmartConnect>
            <CurrentInstallStateSmartConnect Condition="'$(InstalledVersionSmartConnect)'==''">False</CurrentInstallStateSmartConnect>
            <InstalledVersionWEC Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.WindowsExplorerClient64.msi)</InstalledVersionWEC>
            <InstalledVersionWEC Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.WindowsExplorerClient.msi)</InstalledVersionWEC>
            <CurrentInstallStateWEC Condition="'$(InstalledVersionWEC)'!=''">True</CurrentInstallStateWEC>
            <CurrentInstallStateWEC Condition="'$(InstalledVersionWEC)'==''">False</CurrentInstallStateWEC>
            <InstalledVersionWECServer Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.WindowsExplorerClient.Server64.msi)</InstalledVersionWECServer>
            <InstalledVersionWECServer Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.WindowsExplorerClient.Server.msi)</InstalledVersionWECServer>
            <CurrentInstallStateWECServer Condition="'$(InstalledVersionWECServer)'!=''">True</CurrentInstallStateWECServer>
            <CurrentInstallStateWECServer Condition="'$(InstalledVersionWECServer)'==''">False</CurrentInstallStateWECServer>
            <InstalledVersionWorkflowDesigner Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.WorkflowDesigner.msi)</InstalledVersionWorkflowDesigner>
            <InstalledVersionWorkflowDesigner Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.WorkflowDesigner.msi)</InstalledVersionWorkflowDesigner>
            <CurrentInstallStateWorkflowDesigner Condition="'$(InstalledVersionWorkflowDesigner)'!=''">True</CurrentInstallStateWorkflowDesigner>
            <CurrentInstallStateWorkflowDesigner Condition="'$(InstalledVersionWorkflowDesigner)'==''">False</CurrentInstallStateWorkflowDesigner>
            <InstalledVersionUrlCreator Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.UrlCreator.msi)</InstalledVersionUrlCreator>
            <InstalledVersionUrlCreator Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.UrlCreator.msi)</InstalledVersionUrlCreator>
            <CurrentInstallStateUrlCreator Condition="'$(InstalledVersionUrlCreator)'!=''">True</CurrentInstallStateUrlCreator>
            <CurrentInstallStateUrlCreator Condition="'$(InstalledVersionUrlCreator)'==''">False</CurrentInstallStateUrlCreator>
            <InstalledVersionLocalDataConnector Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.LocalDataConnector.msi)</InstalledVersionLocalDataConnector>
            <InstalledVersionLocalDataConnector Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.LocalDataConnector.msi)</InstalledVersionLocalDataConnector>
            <CurrentInstallStateLocalDataConnector Condition="'$(InstalledVersionLocalDataConnector)'!=''">True</CurrentInstallStateLocalDataConnector>
            <CurrentInstallStateLocalDataConnector Condition="'$(InstalledVersionLocalDataConnector)'==''">False</CurrentInstallStateLocalDataConnector>
            <InstalledVersionUserSynchronization Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.UserSynchronization.msi)</InstalledVersionUserSynchronization>
            <InstalledVersionUserSynchronization Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.UserSynchronization.msi)</InstalledVersionUserSynchronization>
            <CurrentInstallStateUserSynchronization Condition="'$(InstalledVersionUserSynchronization)'!=''">True</CurrentInstallStateUserSynchronization>
            <CurrentInstallStateUserSynchronization Condition="'$(InstalledVersionUserSynchronization)'==''">False</CurrentInstallStateUserSynchronization>
            <ExportIsRunning Condition="'$(CurrentInstallStateExport)'!=''">True</ExportIsRunning>
            <ExportIsRunning Condition="'$(CurrentInstallStateExport)'==''">False</ExportIsRunning>
        </PropertyGroup>
        <!-- Retired Modules from Registry -->
        <PropertyGroup>
            <InstalledVersionIndexCleaner Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.IndexCleaner.msi)</InstalledVersionIndexCleaner>
            <InstalledVersionIndexCleaner Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.IndexCleaner.msi)</InstalledVersionIndexCleaner>
            <CurrentInstallStateRetiredIndexCleaner Condition="'$(InstalledVersionIndexCleaner)'!=''">True</CurrentInstallStateRetiredIndexCleaner>
            <InstalledVersionC2Toshiba Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.ConnectToToshiba.msi)</InstalledVersionC2Toshiba>
            <InstalledVersionC2Toshiba Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.ConnectToToshiba.msi)</InstalledVersionC2Toshiba>
            <CurrentInstallStateRetiredC2Toshiba Condition="'$(InstalledVersionC2Toshiba)'!=''">True</CurrentInstallStateRetiredC2Toshiba>
            <InstalledVersionUploadService Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.UploadService.msi)</InstalledVersionUploadService>
            <InstalledVersionUploadService Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.UploadService.msi)</InstalledVersionUploadService>
            <CurrentInstallStateRetiredUploadService Condition="'$(InstalledVersionUploadService)'!=''">True</CurrentInstallStateRetiredUploadService>
            <InstalledVersionCommonOCR Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@DocuWare.CommonOCR.msi)</InstalledVersionCommonOCR>
            <InstalledVersionCommonOCR Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@DocuWare.CommonOCR.msi)</InstalledVersionCommonOCR>
            <CurrentInstallStateRetiredCommonOCR Condition="'$(InstalledVersionCommonOCR)'!=''">True</CurrentInstallStateRetiredCommonOCR>
        </PropertyGroup>
        <!-- Retired Modules from MSI Database (6.1 and before)-->
        <ModuleIsInstalled UpgradeCode="{D6B0D30E-676A-458E-80CD-1254D5953052}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionC2Toshiba)'==''">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredC2Toshiba" />
        </ModuleIsInstalled>
        <ModuleIsInstalled UpgradeCode="{160757C3-4D73-413F-81ED-68D2F684C76F}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionUploadService)'==''">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredUploadService" />
        </ModuleIsInstalled>
        <PropertyGroup>
            <CurrentInstallStateRetiredC2Toshiba Condition="'$(InstalledVersionC2Toshiba)'=='' AND '$(CurrentInstallStateRetiredC2Toshiba)'==''">False</CurrentInstallStateRetiredC2Toshiba>
            <CurrentInstallStateRetiredUploadService Condition="'$(InstalledVersionUploadService)'=='' AND '$(CurrentInstallStateRetiredUploadService)'==''">False</CurrentInstallStateRetiredUploadService>
        </PropertyGroup>
        <!-- Only checking if Registry is not set -->
        <ModuleIsInstalled UpgradeCode="{99544C3F-4F02-4B70-8A6B-B77B5E0EBABC}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionIndexCleaner)'==''">
          <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredIndexCleaner" />
        </ModuleIsInstalled>
        <ModuleIsInstalled UpgradeCode="{0956B3D3-C566-4F20-AE04-52C206AF9290}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionCommonOCR)'==''">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredCommonOCR" />
        </ModuleIsInstalled>
        <ModuleIsInstalled UpgradeCode="{FC5D6495-0DD5-4F14-9AD9-A63B0D938468}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionAdminTool)'==''">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredAdminTool" />
        </ModuleIsInstalled>
        <ModuleIsInstalled UpgradeCode="{C3F0CFB9-AFE3-4105-B0E0-AC5EAA8007AC}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionC2Outlook)'==''">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredC2Outlook" />
        </ModuleIsInstalled>
        <ModuleIsInstalled UpgradeCode="{D11AB4FD-B244-4F29-AC0B-4C134D190220}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionDesktopFramework)'==''">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredDesktop" />
        </ModuleIsInstalled>
        <ModuleIsInstalled UpgradeCode="{2A720C15-6A51-4A0B-9EE7-0411544170AA}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionUpdate)'==''">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredUpdate" />
        </ModuleIsInstalled>
        <ModuleIsInstalled UpgradeCode="{A5AA3988-3105-4D15-B456-2D89B649C216}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionWEC)'=='' AND '$(Is64bitOS)'=='False'">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredWEC" />
        </ModuleIsInstalled>
        <ModuleIsInstalled UpgradeCode="{E18D904C-6DA9-4653-8479-4DF808408F50}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionWEC)'=='' AND '$(Is64bitOS)'=='True'">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredWEC" />
        </ModuleIsInstalled>
        <ModuleIsInstalled UpgradeCode="{D7F87083-456D-4F1F-8AB5-A6DAFA59AD95}" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionWorkflowDesigner)'==''">
            <Output TaskParameter="IsInstalled" PropertyName="CurrentInstallStateRetiredWorkflowDesigner" />
        </ModuleIsInstalled>
        <PropertyGroup>
            <CurrentInstallStateRetiredCommonOCR Condition="'$(InstalledVersionCommonOCR)'=='' AND '$(CurrentInstallStateRetiredCommonOCR)'==''">False</CurrentInstallStateRetiredCommonOCR>
            <CurrentInstallStateRetiredAdminTool Condition="'$(InstalledVersionAdminTool)'=='' AND '$(CurrentInstallStateRetiredAdminTool)'==''">False</CurrentInstallStateRetiredAdminTool>
            <CurrentInstallStateRetiredC2Outlook Condition="'$(InstalledVersionC2Outlook)'=='' AND '$(CurrentInstallStateRetiredC2Outlook)'==''">False</CurrentInstallStateRetiredC2Outlook>
            <CurrentInstallStateRetiredDesktop Condition="'$(InstalledVersionDesktopFramework)'=='' AND '$(CurrentInstallStateRetiredDesktop)'==''">False</CurrentInstallStateRetiredDesktop>
            <CurrentInstallStateRetiredUpdate Condition="'$(InstalledVersionUpdate)'=='' AND '$(CurrentInstallStateRetiredUpdate)'==''">False</CurrentInstallStateRetiredUpdate>
            <CurrentInstallStateRetiredWEC Condition="'$(InstalledVersionWEC)'=='' AND '$(CurrentInstallStateRetiredWEC)'==''">False</CurrentInstallStateRetiredWEC>
            <CurrentInstallStateRetiredWorkflowDesigner Condition="'$(InstalledVersionWorkflowDesigner)'=='' AND '$(CurrentInstallStateRetiredWorkflowDesigner)'==''">False</CurrentInstallStateRetiredWorkflowDesigner>
            <CurrentInstallStateRetiredIndexCleaner Condition="'$(InstalledVersionIndexCleaner)'=='' AND '$(CurrentInstallStateRetiredIndexCleaner)'==''">False</CurrentInstallStateRetiredIndexCleaner>
        </PropertyGroup>
        <!--Special check for WEC when upgrade from 6.5 or before-->
        <MSIVersionfromDB UpgradeCode="{A5AA3988-3105-4D15-B456-2D89B649C216}" ContinueOnError="ErrorAndContinue" Condition="('$(CurrentInstallStateRetiredWEC)'=='True') AND ('$(Is64bitOS)'=='False')">
            <Output TaskParameter="InstalledMSIVersion" PropertyName="InstalledMSIVersionRetiredWEC" />
        </MSIVersionfromDB>
        <MSIVersionfromDB UpgradeCode="{E18D904C-6DA9-4653-8479-4DF808408F50}" ContinueOnError="ErrorAndContinue" Condition="('$(CurrentInstallStateRetiredWEC)'=='True') AND ('$(Is64bitOS)'=='True')">
            <Output TaskParameter="InstalledMSIVersion" PropertyName="InstalledMSIVersionRetiredWEC" />
        </MSIVersionfromDB>
        <VersionCompare FirstVersion="$(InstalledMSIVersionRetiredWEC)" Operator="Smaller" SecondVersion="6.6.0.0" ContinueOnError="ErrorAndContinue" Condition="('$(CurrentInstallStateRetiredWEC)'=='True') AND ('$(InstalledMSIVersionRetiredWEC)'!='')">
            <Output TaskParameter="CompareResult" PropertyName="InstalledMSIVersionRetriredWECSmaller66" />
        </VersionCompare>
    </Target>

    <Target Name="_InitMSINames">
        <PropertyGroup>
            <DesktopFrameWorkMSIName>DocuWare.Desktop.msi</DesktopFrameWorkMSIName>
            <ClientOCRMSIName>DocuWare.ClientOCR.msi</ClientOCRMSIName>
            <UpdateMSIName>DocuWare.Update.msi</UpdateMSIName>
            <C2OutlookMSIName>DocuWare.ConnectToOutlook.msi</C2OutlookMSIName>
            <EditSendMSIName>DocuWare.Desktop.EditSend.msi</EditSendMSIName>
            <AdminToolMSIName>DocuWare.AdministrationOnline.msi</AdminToolMSIName>
            <ScannerMSIName>DocuWare.Desktop.Scanner.msi</ScannerMSIName>
            <ExportMSIName>DocuWare.Export.msi</ExportMSIName>
            <ImportMSIName>DocuWare.Desktop.Import.msi</ImportMSIName>
            <PrinterMSIName>DocuWare.Desktop.Printer.msi</PrinterMSIName>
            <SmartConnectMSIName>DocuWare.Desktop.SmartConnect.msi</SmartConnectMSIName>
            <WECMSIName Condition="('$(Is64bitOS)'=='False')">DocuWare.WindowsExplorerClient.msi</WECMSIName>
            <WECMSIName Condition="('$(Is64bitOS)'=='True')">DocuWare.WindowsExplorerClient64.msi</WECMSIName>
            <WECServerMSIName Condition="('$(Is64bitOS)'=='False')">DocuWare.WindowsExplorerClient.Server.msi</WECServerMSIName>
            <WECServerMSIName Condition="('$(Is64bitOS)'=='True')">DocuWare.WindowsExplorerClient.Server64.msi</WECServerMSIName>
            <WorkflowDesignerMSIName>DocuWare.WorkflowDesigner.msi</WorkflowDesignerMSIName>
            <UrlCreatorMSIName>DocuWare.UrlCreator.msi</UrlCreatorMSIName>
            <LocalDataConnectorMSIName>DocuWare.LocalDataConnector.msi</LocalDataConnectorMSIName>
            <UserSynchronizationMSIName>DocuWare.UserSynchronization.msi</UserSynchronizationMSIName>
        </PropertyGroup>
    </Target>
    <Target Name="_InitDefaultParameterValuesOnLine" Condition="'$(IsOffline)'!='True'" DependsOnTargets="_InitMSINames">
        <GetMsiUrl SettingsPath="$(SettingsPath)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="DefaultMsiUrl" PropertyName="DefaultMsiUrl" />
            <Output TaskParameter="C2OutlookMsiUrl" PropertyName="C2OutlookMsiUrl" />
            <Output TaskParameter="EditSendMsiUrl" PropertyName="EditSendMsiUrl" />
            <Output TaskParameter="AdminToolMsiUrl" PropertyName="AdminToolMsiUrl" />
            <Output TaskParameter="ScannerMsiUrl" PropertyName="ScannerMsiUrl" />
            <Output TaskParameter="ExportMsiUrl" PropertyName="ExportMsiUrl" />
            <Output TaskParameter="ImportMsiUrl" PropertyName="ImportMsiUrl" />
            <Output TaskParameter="PrinterMsiUrl" PropertyName="PrinterMsiUrl" />
            <Output TaskParameter="SmartConnectMsiUrl" PropertyName="SmartConnectMsiUrl" />
            <Output TaskParameter="WECMsiUrl" PropertyName="WECMsiUrl" />
            <Output TaskParameter="WECServerMsiUrl" PropertyName="WECServerMsiUrl" />
            <Output TaskParameter="WorkflowDesignerMsiUrl" PropertyName="WorkflowDesignerMsiUrl" />
            <Output TaskParameter="UrlCreatorMsiUrl" PropertyName="UrlCreatorMsiUrl" />
            <Output TaskParameter="LocalDataConnectorMsiUrl" PropertyName="LocalDataConnectorMsiUrl" />
            <Output TaskParameter="UserSynchronizationMsiUrl" PropertyName="UserSynchronizationMsiUrl" />
            <Output TaskParameter="ClientOcrMsiUrl" PropertyName="ClientOcrMsiUrl" />
            <Output TaskParameter="DesktopMsiUrl" PropertyName="DesktopMsiUrl" />
            <Output TaskParameter="UpdateMsiUrl" PropertyName="UpdateMsiUrl" />
        </GetMsiUrl>
        <ItemGroup>
            <MsiUrls Include="DefaultMsiUrl=$(DefaultMsiUrl)" />
            <MsiUrls Include="C2OutlookMsiUrl=$(C2OutlookMsiUrl)" />
            <MsiUrls Include="EditSendMsiUrl=$(EditSendMsiUrl)" />
            <MsiUrls Include="AdminToolMsiUrl=$(AdminToolMsiUrl)" />
            <MsiUrls Include="ScannerMsiUrl=$(ScannerMsiUrl)" />
            <MsiUrls Include="ExportMsiUrl=$(ExportMsiUrl)" />
            <MsiUrls Include="ImportMsiUrl=$(ImportMsiUrl)" />
            <MsiUrls Include="PrinterMsiUrl=$(PrinterMsiUrl)" />
            <MsiUrls Include="SmartConnectMsiUrl=$(SmartConnectMsiUrl)" />
            <MsiUrls Include="WECMsiUrl=$(WECMsiUrl)" />
            <MsiUrls Include="WECServerMsiUrl=$(WECServerMsiUrl)" />
            <MsiUrls Include="WorkflowDesignerMsiUrl=$(WorkflowDesignerMsiUrl)" />
            <MsiUrls Include="UrlCreatorMsiUrl=$(UrlCreatorMsiUrl)" />
            <MsiUrls Include="LocalDataConnectorMsiUrl=$(LocalDataConnectorMsiUrl)" />
            <MsiUrls Include="UserSynchronizationMsiUrl=$(UserSynchronizationMsiUrl)" />
            <MsiUrls Include="ClientOcrMsiUrl=$(ClientOcrMsiUrl)" />
            <MsiUrls Include="DesktopMsiUrl=$(DesktopMsiUrl)" />
            <MsiUrls Include="UpdateMsiUrl=$(UpdateMsiUrl)" />
        </ItemGroup>
        <Message Text="MsiUrls: %(MsiUrls.Identity)" />
        <GetThumbprintString SettingsPath="$(SettingsPath)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ThumbprintString" PropertyName="DocuWareThumbprintString" />
        </GetThumbprintString>
        <ModuleServerVersion MsiUrl="$(C2OutlookMsiUrl)" ModuleName="$(C2OutlookMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionC2Outlook" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(AdminToolMsiUrl)" ModuleName="$(AdminToolMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionAdminTool" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(EditSendMsiUrl)" ModuleName="$(EditSendMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionEditSend" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(ScannerMsiUrl)" ModuleName="$(ScannerMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionScanner" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(ExportMsiUrl)" ModuleName="$(ExportMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionExport" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(ImportMsiUrl)" ModuleName="$(ImportMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionImport" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(PrinterMsiUrl)" ModuleName="$(PrinterMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionPrinter" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(SmartConnectMsiUrl)" ModuleName="$(SmartConnectMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionSmartConnect" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(WECMsiUrl)" ModuleName="$(WECMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionWEC" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(WECServerMsiUrl)" ModuleName="$(WECServerMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionWECServer" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(WorkflowDesignerMsiUrl)" ModuleName="$(WorkflowDesignerMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionWorkflowDesigner" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(UrlCreatorMsiUrl)" ModuleName="$(UrlCreatorMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionUrlCreator" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(UserSynchronizationMsiUrl)" ModuleName="$(UserSynchronizationMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionUserSynchronization" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(ClientOcrMsiUrl)" ModuleName="$(ClientOCRMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionClientOCR" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(DesktopMsiUrl)" ModuleName="$(DesktopFrameWorkMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionDesktopFramework" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(UpdateMsiUrl)" ModuleName="$(UpdateMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionUpdate" />
        </ModuleServerVersion>
        <ModuleServerVersion MsiUrl="$(LocalDataConnectorMsiUrl)" ModuleName="$(LocalDataConnectorMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ServerVersion" PropertyName="ServerVersionLocalDataConnector" />
        </ModuleServerVersion>
    </Target>
    <Target Name="_InitDefaultParameterValues"  DependsOnTargets="_InitMSINames;_InitDefaultParameterValuesOnLine">
        <PropertyGroup>
            <SettingsPathFromRegistry Condition="'$(Is64bitOS)'=='False'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\DocuWare\Setup@SettingsPath)</SettingsPathFromRegistry>
            <SettingsPathFromRegistry Condition="'$(Is64bitOS)'=='True'">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\DocuWare\Setup@SettingsPath)</SettingsPathFromRegistry>
            <SettingsPath Condition="'$(SettingsPath)'=='' AND '$(SettingsPathFromRegistry)'!=''">$(SettingsPathFromRegistry)</SettingsPath>
            <SettingsPathOriginal>$(SettingsPath)</SettingsPathOriginal>
            <SettingsPath>$(SettingsPath)%26clientsetupversion=$(ClientSetupVersion)</SettingsPath>
        </PropertyGroup>

        <PropertyGroup>
            <MinimumSupportedWindowsOSVersion>62</MinimumSupportedWindowsOSVersion>
            <InitialV3ClientSetupMSIVersion>7.4.0.0</InitialV3ClientSetupMSIVersion>
            <!--Initial MSI Version delivered with V3 Client Setup. Used for preserve MSI Version Registry Entries. Do not Change.-->
            <InitialV3OCRMSIVersion>11.1.0.0</InitialV3OCRMSIVersion>
            <!--Initial MSI Version of Client OCR delivered with V3 Client Setup. Used for preserve MSI Version Registry Entries. Do not Change.-->
            <RegistryVersionForFailedInstall>1.0.0.0</RegistryVersionForFailedInstall>
            <RegistryVersionForDocuWareVersionWithoutRegistryVersion>2.0.0.0</RegistryVersionForDocuWareVersionWithoutRegistryVersion>
            <CurrentWindowsDesktopRuntimex64Ver>8.0.6</CurrentWindowsDesktopRuntimex64Ver>
            <CurrentWindowsDesktopRuntimex86Ver>8.0.6</CurrentWindowsDesktopRuntimex86Ver>
            <CurrentWebView2Runtimex64Ver>93.0.961.38</CurrentWebView2Runtimex64Ver>
            <CurrentWebView2Runtimex86Ver>93.0.961.38</CurrentWebView2Runtimex86Ver>
            <CurrentAspNetCoreRuntimex86Ver>8.0.6</CurrentAspNetCoreRuntimex86Ver>
            <CurrentNETCoreRuntimex86Ver>8.0.6</CurrentNETCoreRuntimex86Ver>
            <CurrentWindowsDesktopRuntimex64FileName>windowsdesktop-runtime-$(CurrentWindowsDesktopRuntimex64Ver)-win-x64.exe</CurrentWindowsDesktopRuntimex64FileName>
            <CurrentWindowsDesktopRuntimex86FileName>windowsdesktop-runtime-$(CurrentWindowsDesktopRuntimex86Ver)-win-x86.exe</CurrentWindowsDesktopRuntimex86FileName>
            <CurrentWebView2Runtimex64FileName>MicrosoftEdgeWebView2RuntimeInstallerX64.exe</CurrentWebView2Runtimex64FileName>
            <CurrentWebView2Runtimex86FileName>MicrosoftEdgeWebView2RuntimeInstallerX86.exe</CurrentWebView2Runtimex86FileName>
            <CurrentAspNetCoreRuntimex86FileName>aspnetcore-runtime-$(CurrentAspNetCoreRuntimex86Ver)-win-x86.exe</CurrentAspNetCoreRuntimex86FileName>
            <CurrentNETCoreRuntimex86FileName>dotnet-runtime-$(CurrentNETCoreRuntimex86Ver)-win-x86.exe</CurrentNETCoreRuntimex86FileName>
            <C2OutlookTerminateWaitTimeout>10</C2OutlookTerminateWaitTimeout>
            <ExportTerminateWaitTimeout>10</ExportTerminateWaitTimeout>
            <WECServerTerminateWaitTimeout>10</WECServerTerminateWaitTimeout>
            <ClientSetupDir Condition="('$(ClientSetupDir)'=='')">$(ProgramFiles)\DocuWare\Client Setup</ClientSetupDir>
            <ClientSetupDir>$(ClientSetupDir.Replace('"', ""))</ClientSetupDir>
            <ClientSetupDir>$(ClientSetupDir.TrimEnd('\'))</ClientSetupDir>
            <PublicDesktopFolder>$(Public)\Desktop</PublicDesktopFolder>
            <DocuWareTemp Condition="'$(DocuWareTemp)'==''">$(AllUsersProfile)\DocuWare\Temp</DocuWareTemp>
            <DocuWareTemp>$(DocuWareTemp.Replace('"', ""))</DocuWareTemp>
            <DocuWareTemp>$(DocuWareTemp.TrimEnd('\'))</DocuWareTemp>
            <ClientSetupBaseDir Condition="('$(ClientSetupBaseDir)'=='')">$(ProgramFiles)\DocuWare</ClientSetupBaseDir>
            <ClientSetupBaseDir>$(ClientSetupBaseDir.Replace('"', ""))</ClientSetupBaseDir>
            <ClientSetupBaseDir>$(ClientSetupBaseDir.TrimEnd('\'))</ClientSetupBaseDir>
            <ClientSetupBaseDir64 Condition="('$(ClientSetupBaseDir64)'=='')">$(ProgramW6432)\DocuWare</ClientSetupBaseDir64>
            <ClientSetupBaseDir64>$(ClientSetupBaseDir64.Replace('"', ""))</ClientSetupBaseDir64>
            <ClientSetupBaseDir64>$(ClientSetupBaseDir64.TrimEnd('\'))</ClientSetupBaseDir64>
            <ClientSetupLogsDirectory>$(AllUsersProfile)\DocuWare\ClientSetup</ClientSetupLogsDirectory>
            <ClientSetupDownloadDir>$(AllUsersProfile)\DocuWare\Temp\ClientSetup</ClientSetupDownloadDir>
            <DownloadDirVC100>$(ClientSetupDownloadDir)\Prerequisites\VCRedist100</DownloadDirVC100>
            <DownloadDirVC140>$(ClientSetupDownloadDir)\Prerequisites\VCRedist140</DownloadDirVC140>
            <DownloadDirWinRuntime>$(ClientSetupDownloadDir)\Prerequisites\dotNET</DownloadDirWinRuntime>
            <DownloadDirWebView2Runtime>$(ClientSetupDownloadDir)\Prerequisites\WebView2</DownloadDirWebView2Runtime>
            <DownloadDirUpdate>$(ClientSetupDownloadDir)\$(ServerVersionUpdate)</DownloadDirUpdate>
            <DownloadDirDesktopFramework>$(ClientSetupDownloadDir)\$(ServerVersionDesktopFramework)</DownloadDirDesktopFramework>
            <DownloadDirClientOCR>$(ClientSetupDownloadDir)\$(ServerVersionClientOCR)</DownloadDirClientOCR>
            <DownloadDirC2Outlook>$(ClientSetupDownloadDir)\$(ServerVersionC2Outlook)</DownloadDirC2Outlook>
            <DownloadDirEditSend>$(ClientSetupDownloadDir)\$(ServerVersionEditSend)</DownloadDirEditSend>
            <DownloadDirAdminTool>$(ClientSetupDownloadDir)\$(ServerVersionAdminTool)</DownloadDirAdminTool>
            <DownloadDirScanner>$(ClientSetupDownloadDir)\$(ServerVersionScanner)</DownloadDirScanner>
            <DownloadDirExport>$(ClientSetupDownloadDir)\$(ServerVersionExport)</DownloadDirExport>
            <DownloadDirImport>$(ClientSetupDownloadDir)\$(ServerVersionImport)</DownloadDirImport>
            <DownloadDirPrinter>$(ClientSetupDownloadDir)\$(ServerVersionPrinter)</DownloadDirPrinter>
            <DownloadDirSmartConnect>$(ClientSetupDownloadDir)\$(ServerVersionSmartConnect)</DownloadDirSmartConnect>
            <DownloadDirWEC>$(ClientSetupDownloadDir)\$(ServerVersionWEC)</DownloadDirWEC>
            <DownloadDirWECServer>$(ClientSetupDownloadDir)\$(ServerVersionWECServer)</DownloadDirWECServer>
            <DownloadDirWorkflowDesigner>$(ClientSetupDownloadDir)\$(ServerVersionWorkflowDesigner)</DownloadDirWorkflowDesigner>
            <DownloadDirUrlCreator>$(ClientSetupDownloadDir)\$(ServerVersionUrlCreator)</DownloadDirUrlCreator>
            <DownloadDirLocalDataConnector>$(ClientSetupDownloadDir)\$(ServerVersionLocalDataConnector)</DownloadDirLocalDataConnector>
            <DownloadDirUserSynchronization>$(ClientSetupDownloadDir)\$(ServerVersionUserSynchronization)</DownloadDirUserSynchronization>
            <OverallSuccess>True</OverallSuccess>
            <CRuntimeV10x86InstallSuccess>True</CRuntimeV10x86InstallSuccess>
            <CRuntimeV10x64InstallSuccess>True</CRuntimeV10x64InstallSuccess>
            <CRuntimeV14x86InstallSuccess>True</CRuntimeV14x86InstallSuccess>
            <WinRuntimex64InstallSuccess>True</WinRuntimex64InstallSuccess>
            <WinRuntimex86InstallSuccess>True</WinRuntimex86InstallSuccess>
            <AspNetCoreRuntimex86InstallSuccess>True</AspNetCoreRuntimex86InstallSuccess>
            <NETCoreRuntimex86InstallSuccess>True</NETCoreRuntimex86InstallSuccess>
            <WebView2Runtimex64InstallSuccess>True</WebView2Runtimex64InstallSuccess>
            <WebView2Runtimex86InstallSuccess>True</WebView2Runtimex86InstallSuccess>
        </PropertyGroup>

        <PropertyGroup>
            <C2Outlook Condition="'$(C2Outlook)'==''">False</C2Outlook>
            <EditSend Condition="'$(EditSend)'==''">False</EditSend>
            <AdminTool Condition="'$(AdminTool)'==''">False</AdminTool>
            <Scanner Condition="'$(Scanner)'==''">False</Scanner>
            <Export Condition="'$(Export)'==''">False</Export>
            <Import Condition="'$(Import)'==''">False</Import>
            <Printer Condition="'$(Printer)'==''">False</Printer>
            <SmartConnect Condition="'$(SmartConnect)'==''">False</SmartConnect>
            <WEC Condition="'$(WEC)'==''">False</WEC>
            <WECServer>False</WECServer>
            <WECServer Condition="'$(WEC)'=='True'">True</WECServer>
            <WorkflowDesigner Condition="'$(WorkflowDesigner)'==''">False</WorkflowDesigner>
            <UrlCreator Condition="'$(UrlCreator)'==''">False</UrlCreator>
            <LocalDataConnector Condition="'$(LocalDataConnector)'==''">False</LocalDataConnector>
            <UserSynchronization Condition="'$(UserSynchronization)'==''">False</UserSynchronization>
            <DesktopFramework Condition="(('$(C2Outlook)'=='False' AND '$(EditSend)'=='False' AND '$(AdminTool)'=='False' AND '$(Export)'=='False' AND '$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(WEC)'=='False' AND '$(WorkflowDesigner)'=='False') AND ('$(CurrentInstallStateDesktopFramework)'=='True') AND '$(UpdateMode)'!='True')">False</DesktopFramework>
            <ClientOCR Condition="(('$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(C2Outlook)'=='False') AND ('$(CurrentInstallStateClientOCR)'=='True') AND '$(UpdateMode)'!='True')">False</ClientOCR>
            <Update Condition="'$(Update)'==''">False</Update>
            <BundleUpdate Condition="'$(BundleUpdate)'==''">False</BundleUpdate>
        </PropertyGroup>

        <PropertyGroup>
            <SuccessfullInstallC2Outlook>True</SuccessfullInstallC2Outlook>
            <SuccessfullInstallEditSend>True</SuccessfullInstallEditSend>
            <SuccessfullInstallAdminTool>True</SuccessfullInstallAdminTool>
            <SuccessfullInstallScanner>True</SuccessfullInstallScanner>
            <SuccessfullInstallExport>True</SuccessfullInstallExport>
            <SuccessfullInstallImport>True</SuccessfullInstallImport>
            <SuccessfullInstallPrinter>True</SuccessfullInstallPrinter>
            <SuccessfullInstallSmartConnect>True</SuccessfullInstallSmartConnect>
            <SuccessfullInstallWEC>True</SuccessfullInstallWEC>
            <SuccessfullInstallWECServer>True</SuccessfullInstallWECServer>
            <SuccessfullInstallWorkflowDesigner>True</SuccessfullInstallWorkflowDesigner>
            <SuccessfullInstallUrlCreator>True</SuccessfullInstallUrlCreator>
            <SuccessfullInstallLocalDataConnector>True</SuccessfullInstallLocalDataConnector>
            <SuccessfullInstallUserSynchronization>True</SuccessfullInstallUserSynchronization>
            <SuccessfullInstallDesktopFramework>True</SuccessfullInstallDesktopFramework>
            <SuccessfullInstallUpdate>True</SuccessfullInstallUpdate>
            <SuccessfullInstallClientOCR>True</SuccessfullInstallClientOCR>
        </PropertyGroup>
    </Target>

    <Target Name="Test_Error">
        <Message Text="#1 Goal: This target tests various errors." Importance="high"/>
        <Error   Text="#2 You should see this error (1/2)." ContinueOnError="ErrorAndContinue"/>
        <Message Text="#3 Message between two errors." Importance="high"/>
        <Error   Text="#4 You should see this error (2/2)." ContinueOnError="ErrorAndContinue"/>
        <Message Text="#5 End. Total result of this target must be error." Importance="high"/>
    </Target>
    <Target Name="Test_Warning">
        <Message Text="#1 Goal: This target tests various warnings." Importance="high"/>
        <Warning Text="#2 You should see this warning (1/2)." />
        <Message Text="#3 Message between two warnings." Importance="high"/>
        <Warning Text="#4 You should see this warning (2/2)." />
        <Message Text="#5 End. Total result of this target must be warning." Importance="high"/>
    </Target>
    <Target Name="Test_Mixed">
        <Message Text="#1 Goal: This target tests a warning and an error." Importance="high"/>
        <Warning Text="#2 You should see this warning." />
        <Message Text="#3 Message between warning and error." Importance="high"/>
        <Error   Text="#4 You should see this error." ContinueOnError="ErrorAndContinue" />
        <Message Text="#5 End. Total result of this target must be error." Importance="high"/>
    </Target>
    <Target Name="Phase_Test" DependsOnTargets="Test_Error;Test_Warning;Test_Mixed"/>

    <Target Name="CheckForPendingReboot">
        <GetRebootRequired>
            <Output TaskParameter="IsRebootRequired" PropertyName="IsRebootRequired" />
        </GetRebootRequired>
        <Message Text="Reboot is required: $(IsRebootRequired)"></Message>
        <!--<Error Text="" />-->
        <DWMessage Text="A pending reboot was detected. Please reboot this machine and restart DocuWare Client Setup." StringId="MSBuildCheckForPendingReboot" Param1="" Param2="" Param3="" Level="Warning" Condition="'$(IsRebootRequired)'=='True'" ContinueOnError="ErrorAndContinue"/>
    </Target>

    <Target Name="CheckForUnsupportedWindowsVersion">
        <DWMessage Text="You are installing DocuWare on a version of Windows that is not supported by DocuWare." StringId="MSBuildCheckForUnsupportedWindowsVersion" Param1="" Param2="" Param3="" Level="Error" Condition="($(OSVersionInt) &lt; $(MinimumSupportedWindowsOSVersion)) AND ('$(IsOSBuildNumberWhitelisted)'=='True')"  ContinueOnError="ErrorAndContinue"/>
        <DWMessage Text="You are installing DocuWare on a version of Windows that is not supported by DocuWare." StringId="MSBuildCheckForUnsupportedWindowsVersion" Param1="" Param2="" Param3="" Level="Warning" Condition="('$(IsOSBuildNumberWhitelisted)'=='False')"/>
    </Target>

    <Target Name="CheckMachineName">
        <DWMessage Text="The name of this machine contains an underscore. This might cause issues with certain browsers when accessing the services on this machine." StringId="MSBuildCheckMachineName" Param1="" Param2="" Param3="" Level="Warning" Condition="$(COMPUTERNAME.Contains('_'))"/>
    </Target>

    <Target Name="CheckMemory">
        <PropertyGroup>
            <TotalMainMemoryMBRecommended>4050</TotalMainMemoryMBRecommended>
        </PropertyGroup>
        <DWMessage Text="Your machine does not have the recommended amount of physical memory. You have: $(TotalMainMemoryMB)MB. Recommended: $(TotalMainMemoryMBRecommended)MB" StringId="MSBuildCheckMemory" Param1="$(TotalMainMemoryMB)" Param2="$(TotalMainMemoryMBRecommended)" Param3="" Level="Warning" Condition="$(TotalMainMemoryMB) &lt; $(TotalMainMemoryMBRecommended)"/>
    </Target>
    <Target Name="CheckFreeDiskSpace">
        <PropertyGroup>
            <FreeDiskMemoryMBRecommended>2048</FreeDiskMemoryMBRecommended>
        </PropertyGroup>
        <DWMessage Text="Your machine does not have the recommended amount of free disk size on the system drive. You have: $(FreeDiskMemoryMB)MB. Recommended: $(FreeDiskMemoryMBRecommended)MB" StringId="MSBuildCheckDiskSpaceTooLow" Param1="$(FreeDiskMemoryMB)" Param2="$(FreeDiskMemoryMBRecommended)" Param3="" Level="Error" Condition="$(FreeDiskMemoryMB) &lt; $(FreeDiskMemoryMBRecommended)"/>
    </Target>
    <Target Name="CheckSystemRoot">
        <DWMessage Text="Your machine is missing the environment variable SYSTEMROOT or its content is wrong. Please correct this environment variable." StringId="MSBuildCheckSystemRoot" Param1="" Param2="" Param3="" Level="Error" Condition="!Exists('$(systemroot)')"/>
    </Target>
    <Target Name="CheckTerminalServer">
        <DWMessage Text="You are installing DocuWare client setup on a Terminal Server environment. This might effect all users on this server." StringId="MSBuildCheckTerminalServer" Param1="" Param2="" Param3="" Level="Warning" Condition="('$(IsTerminalServer)'=='True')"/>
    </Target>
    <Target Name="CheckRunningProcesses">
        <CheckForUpdateMode MsiUrl="$(C2OutlookMsiUrl)" ModuleName="$(C2OutlookMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="C2OutlookRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="C2OutlookMinorUpdate" />
        </CheckForUpdateMode>
        <IsProcessRunning ProcessName="OUTLOOK"
                          Condition="('$(C2Outlook)'=='True' AND '$(CurrentInstallStateC2Outlook)'=='False') 
                          OR ('$(C2Outlook)'=='False' AND '$(CurrentInstallStateC2Outlook)'=='True' AND '$(UpdateMode)'!='True') 
                          OR (('$(C2OutlookRelease)'=='True' OR '$(C2OutlookMinorUpdate)'=='True'))">
            <Output TaskParameter="IsRunning" PropertyName="OutlookIsRunning" />
            <Output TaskParameter="IsRunningUnderCurrentUser" PropertyName="OutlookIsRunningUnderCurrentUser" />
        </IsProcessRunning>
        <DWMessage Text="Please close Outlook and retry." StringId="MSBuildCheckOutlookRunning" Level="Error" Condition="'$(OutlookIsRunning)'=='True' AND '$(IsTerminalServer)'=='False'"/>
        <DWMessage Text="Please close Outlook in all sessions on this terminal server and retry." StringId="MSBuildCheckOutlookRunningTerminalSrv" Level="Error" Condition="'$(OutlookIsRunning)'=='True' AND '$(IsTerminalServer)'=='True'" />
    </Target>

    <Target Name="Phase_VerifySystemRequirements" DependsOnTargets="CheckForPendingReboot;CheckForUnsupportedWindowsVersion;CheckMachineName;CheckMemory;CheckSystemRoot;RequiredDiskSpaceCheck;CheckTerminalServer;CheckRunningProcesses;">
    </Target>

    <Target Name="Phase_VerifySystemRequirementsUpdate" DependsOnTargets="_SetUpdateMode;CheckForPendingReboot;CheckForUnsupportedWindowsVersion;CheckMachineName;CheckMemory;CheckSystemRoot;RequiredDiskSpaceCheck;CheckTerminalServer;CheckRunningProcesses;">
    </Target>

    <Target Name="_SetSettingsPath">
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v SettingsPath /t REG_SZ /d "$(SettingsPathOriginal)" /f /reg:32' ContinueOnError="ErrorAndContinue" Condition="('$(SettingsPathFromRegistry)'=='') OR ('$(SettingsPathFromRegistry)'!='$(SettingsPathOriginal)')"/>
    </Target>

    <Target Name="DownloadCRuntimeV10x86">
        <MakeDir Directories='$(DownloadDirVC100)' ContinueOnError="ErrorAndContinue" Condition="!Exists('$(DownloadDirVC100)')" />
        <DownloadPrerequisites FileUrl="$(DefaultMsiUrl)/Prerequisites/VCRedist100/" ModuleName="vcredist_x86.exe" DownloadFolder="$(DownloadDirVC100)" Condition="!Exists('$(DownloadDirVC100)\vcredist_x86.exe')" ContinueOnError="ErrorAndContinue"/>
        <DigitalPrerequisiteSignatureVerification FileUrl="$(DefaultMsiUrl)/Prerequisites/VCRedist100/vcredist_x86.exe" PrereqLocalLocation="$(DownloadDirVC100)\vcredist_x86.exe" Condition="Exists('$(DownloadDirVC100)\vcredist_x86.exe')" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsSigned" PropertyName="IsSignedCRuntimeV10x86" />
            <Output TaskParameter="IsSignatureValid" PropertyName="IsSignatureValidCRuntimeV10x86" />
        </DigitalPrerequisiteSignatureVerification>
        <DWMessage Text="The installation file 'vcredist_x86.exe' does not have a digital signature." StringId="ErrorMessageSignatureMissing" Param1 ="vcredist_x86.exe" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignedCRuntimeV10x86)'!='True'"/>
        <DWMessage Text="The installation file 'vcredist_x86.exe' has an invalid digital signature. Please contact your administrator." StringId="ErrorMessageSignatureInvalid" Param1 ="vcredist_x86.exe" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignatureValidCRuntimeV10x86)'!='True'" />
        <Delete Files="$(DownloadDirVC100)\vcredist_x86.exe" Condition="(Exists('$(DownloadDirVC100)\vcredist_x86.exe')) AND ( ('$(IsSignedCRuntimeV10x86)'!='True') OR ('$(IsSignatureValidCRuntimeV10x86)'!='True'))" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="DownloadCRuntimeV10x64">
        <MakeDir Directories='$(DownloadDirVC100)' ContinueOnError="ErrorAndContinue" Condition="!Exists('$(DownloadDirVC100)')" />
        <DownloadPrerequisites FileUrl="$(DefaultMsiUrl)/Prerequisites/VCRedist100/" ModuleName="vcredist_x64.exe" DownloadFolder="$(DownloadDirVC100)" Condition="!Exists('$(DownloadDirVC100)\vcredist_x64.exe')" ContinueOnError="ErrorAndContinue"/>
        <DigitalPrerequisiteSignatureVerification FileUrl="$(DefaultMsiUrl)/Prerequisites/VCRedist100/vcredist_x64.exe" PrereqLocalLocation="$(DownloadDirVC100)\vcredist_x64.exe" Condition="Exists('$(DownloadDirVC100)\vcredist_x64.exe')" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsSigned" PropertyName="IsSignedCRuntimeV10x64" />
            <Output TaskParameter="IsSignatureValid" PropertyName="IsSignatureValidCRuntimeV10x64" />
        </DigitalPrerequisiteSignatureVerification>
        <DWMessage Text="The installation file 'vcredist_x64.exe' does not have a digital signature." StringId="ErrorMessageSignatureMissing" Param1 ="vcredist_x64.exe" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignedCRuntimeV10x64)'!='True'"/>
        <DWMessage Text="The installation file 'vcredist_x64.exe' has an invalid digital signature. Please contact your administrator." StringId="ErrorMessageSignatureInvalid" Param1 ="vcredist_x64.exe" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignatureValidCRuntimeV10x64)'!='True'" />
        <Delete Files="$(DownloadDirVC100)\vcredist_x64.exe" Condition="(Exists('$(DownloadDirVC100)\vcredist_x64.exe')) AND ( ('$(IsSignedCRuntimeV10x64)'!='True') OR ('$(IsSignatureValidCRuntimeV10x64)'!='True'))" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="DownloadCRuntimeV14x86">
        <MakeDir Directories='$(DownloadDirVC140)' ContinueOnError="ErrorAndContinue" Condition="!Exists('$(DownloadDirVC140)')" />
        <DownloadPrerequisites FileUrl="$(DefaultMsiUrl)/Prerequisites/VCRedist140/" ModuleName="vc_redist.x86.exe" DownloadFolder="$(DownloadDirVC140)" Condition="!Exists('$(DownloadDirVC140)\vc_redist.x86.exe')" ContinueOnError="ErrorAndContinue"/>
        <DigitalPrerequisiteSignatureVerification FileUrl="$(DefaultMsiUrl)/Prerequisites/VCRedist140/vc_redist.x86.exe" PrereqLocalLocation="$(DownloadDirVC140)\vc_redist.x86.exe" Condition="Exists('$(DownloadDirVC140)\vc_redist.x86.exe')" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsSigned" PropertyName="IsSignedCRuntimeV14x86" />
            <Output TaskParameter="IsSignatureValid" PropertyName="IsSignatureValidCRuntimeV14x86" />
        </DigitalPrerequisiteSignatureVerification>
        <DWMessage Text="The installation file 'vc_redist.x86.exe' does not have a digital signature." StringId="ErrorMessageSignatureMissing" Param1 ="vc_redist.x86.exe" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignedCRuntimeV14x86)'!='True'"/>
        <DWMessage Text="The installation file 'vc_redist.x86.exe' has an invalid digital signature. Please contact your administrator." StringId="ErrorMessageSignatureInvalid" Param1 ="vc_redist.x86.exe" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignatureValidCRuntimeV14x86)'!='True'" />
        <Delete Files="$(DownloadDirVC140)\vc_redist.x86.exe" Condition="(Exists('$(DownloadDirVC140)\vc_redist.x86.exe')) AND ( ('$(IsSignedCRuntimeV14x86)'!='True') OR ('$(IsSignatureValidCRuntimeV14x86)'!='True'))" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="_DownloadWindowsDesktopRuntimex64">
        <MakeDir Directories='$(DownloadDirWinRuntime)' ContinueOnError="ErrorAndContinue" Condition="!Exists('$(DownloadDirWinRuntime)')" />
        <DownloadPrerequisites FileUrl="$(DefaultMsiUrl)/Prerequisites/dotNET/" ModuleName="$(CurrentWindowsDesktopRuntimex64FileName)" DownloadFolder="$(DownloadDirWinRuntime)" Condition="!Exists('$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex64FileName)')" ContinueOnError="ErrorAndContinue"/>
        <DigitalPrerequisiteSignatureVerification FileUrl="$(DefaultMsiUrl)/Prerequisites/dotNET/$(CurrentWindowsDesktopRuntimex64FileName)" PrereqLocalLocation="$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex64FileName)" Condition="Exists('$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex64FileName)')" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsSigned" PropertyName="IsSignedWindowsDesktopRuntimex64" />
            <Output TaskParameter="IsSignatureValid" PropertyName="IsSignatureValidWindowsDesktopRuntimex64" />
        </DigitalPrerequisiteSignatureVerification>
        <DWMessage Text="The installation file '$(CurrentWindowsDesktopRuntimex64FileName)' does not have a digital signature." StringId="ErrorMessageSignatureMissing" Param1 ="$(CurrentWindowsDesktopRuntimex64FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignedWindowsDesktopRuntimex64)'!='True'"/>
        <DWMessage Text="The installation file '$(CurrentWindowsDesktopRuntimex64FileName)' has an invalid digital signature. Please contact your administrator." StringId="ErrorMessageSignatureInvalid" Param1 ="$(CurrentWindowsDesktopRuntimex64FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignatureValidWindowsDesktopRuntimex64)'!='True'" />
        <Delete Files="$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex64FileName)" Condition="(Exists('$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex64FileName)')) AND ( ('$(IsSignedWindowsDesktopRuntimex64)'!='True') OR ('$(IsSignatureValidWindowsDesktopRuntimex64)'!='True'))" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="DownloadWinRuntimex64">
        <CallTarget Targets="_DownloadWindowsDesktopRuntimex64" ContinueOnError="ErrorAndContinue" Condition="'$(IsInstalledVersionHigherOrEqualDownloadWinRuntimex64)'=='False'" />
        <CallTarget Targets="_SetWinRuntimex64InstallSuccessToFalse" Condition="'$(MSBuildLastTaskResult)'=='false'" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="_DownloadWindowsDesktopRuntimex86">
        <MakeDir Directories='$(DownloadDirWinRuntime)' ContinueOnError="ErrorAndContinue" Condition="!Exists('$(DownloadDirWinRuntime)')" />
        <DownloadPrerequisites FileUrl="$(DefaultMsiUrl)/Prerequisites/dotNET/" ModuleName="$(CurrentWindowsDesktopRuntimex86FileName)" DownloadFolder="$(DownloadDirWinRuntime)" Condition="!Exists('$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex86FileName)')" ContinueOnError="ErrorAndContinue"/>
        <DigitalPrerequisiteSignatureVerification FileUrl="$(DefaultMsiUrl)/Prerequisites/dotNET/$(CurrentWindowsDesktopRuntimex86FileName)" PrereqLocalLocation="$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex86FileName)" Condition="Exists('$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex86FileName)')" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsSigned" PropertyName="IsSignedWindowsDesktopRuntimex86" />
            <Output TaskParameter="IsSignatureValid" PropertyName="IsSignatureValidWindowsDesktopRuntimex86" />
        </DigitalPrerequisiteSignatureVerification>
        <DWMessage Text="The installation file '$(CurrentWindowsDesktopRuntimex86FileName)' does not have a digital signature." StringId="ErrorMessageSignatureMissing" Param1 ="$(CurrentWindowsDesktopRuntimex86FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignedWindowsDesktopRuntimex86)'!='True'"/>
        <DWMessage Text="The installation file '$(CurrentWindowsDesktopRuntimex86FileName)' has an invalid digital signature. Please contact your administrator." StringId="ErrorMessageSignatureInvalid" Param1 ="$(CurrentWindowsDesktopRuntimex86FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignatureValidWindowsDesktopRuntimex86)'!='True'" />
        <Delete Files="$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex86FileName)" Condition="(Exists('$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex86FileName)')) AND ( ('$(IsSignedWindowsDesktopRuntimex86)'!='True') OR ('$(IsSignatureValidWindowsDesktopRuntimex86)'!='True'))" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DownloadAspNetCoreRuntimex86">
        <MakeDir Directories='$(DownloadDirWinRuntime)' ContinueOnError="ErrorAndContinue" Condition="!Exists('$(DownloadDirWinRuntime)')" />
        <DownloadPrerequisites FileUrl="$(DefaultMsiUrl)/Prerequisites/dotNET/" ModuleName="$(CurrentAspNetCoreRuntimex86FileName)" DownloadFolder="$(DownloadDirWinRuntime)" Condition="!Exists('$(DownloadDirWinRuntime)\$(CurrentAspNetCoreRuntimex86FileName)')" ContinueOnError="ErrorAndContinue"/>
        <DigitalPrerequisiteSignatureVerification FileUrl="$(DefaultMsiUrl)/Prerequisites/dotNET/$(CurrentAspNetCoreRuntimex86FileName)" PrereqLocalLocation="$(DownloadDirWinRuntime)\$(CurrentAspNetCoreRuntimex86FileName)" Condition="Exists('$(DownloadDirWinRuntime)\$(CurrentAspNetCoreRuntimex86FileName)')" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsSigned" PropertyName="IsSignedAspNetCoreRuntimex86" />
            <Output TaskParameter="IsSignatureValid" PropertyName="IsSignatureValidAspNetCoreRuntimex86" />
        </DigitalPrerequisiteSignatureVerification>
        <DWMessage Text="The installation file '$(CurrentAspNetCoreRuntimex86FileName)' does not have a digital signature." StringId="ErrorMessageSignatureMissing" Param1 ="$(CurrentAspNetCoreRuntimex86FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignedAspNetCoreRuntimex86)'!='True'"/>
        <DWMessage Text="The installation file '$(CurrentAspNetCoreRuntimex86FileName)' has an invalid digital signature. Please contact your administrator." StringId="ErrorMessageSignatureInvalid" Param1 ="$(CurrentAspNetCoreRuntimex86FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignatureValidAspNetCoreRuntimex86)'!='True'" />
        <Delete Files="$(DownloadDirWinRuntime)\$(CurrentAspNetCoreRuntimex86FileName)" Condition="(Exists('$(DownloadDirWinRuntime)\$(CurrentAspNetCoreRuntimex86FileName)')) AND ( ('$(IsSignedAspNetCoreRuntimex86)'!='True') OR ('$(IsSignatureValidAspNetCoreRuntimex86)'!='True'))" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DownloadNETCoreRuntimex86">
        <MakeDir Directories='$(DownloadDirWinRuntime)' ContinueOnError="ErrorAndContinue" Condition="!Exists('$(DownloadDirWinRuntime)')" />
        <DownloadPrerequisites FileUrl="$(DefaultMsiUrl)/Prerequisites/dotNET/" ModuleName="$(CurrentNETCoreRuntimex86FileName)" DownloadFolder="$(DownloadDirWinRuntime)" Condition="!Exists('$(DownloadDirWinRuntime)\$(CurrentNETCoreRuntimex86FileName)')" ContinueOnError="ErrorAndContinue"/>
        <DigitalPrerequisiteSignatureVerification FileUrl="$(DefaultMsiUrl)/Prerequisites/dotNET/$(CurrentNETCoreRuntimex86FileName)" PrereqLocalLocation="$(DownloadDirWinRuntime)\$(CurrentNETCoreRuntimex86FileName)" Condition="Exists('$(DownloadDirWinRuntime)\$(CurrentNETCoreRuntimex86FileName)')" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsSigned" PropertyName="IsSignedNETCoreRuntimex86" />
            <Output TaskParameter="IsSignatureValid" PropertyName="IsSignatureValidNETCoreRuntimex86" />
        </DigitalPrerequisiteSignatureVerification>
        <DWMessage Text="The installation file '$(CurrentNETCoreRuntimex86FileName)' does not have a digital signature." StringId="ErrorMessageSignatureMissing" Param1 ="$(CurrentNETCoreRuntimex86FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignedNETCoreRuntimex86)'!='True'"/>
        <DWMessage Text="The installation file '$(CurrentNETCoreRuntimex86FileName)' has an invalid digital signature. Please contact your administrator." StringId="ErrorMessageSignatureInvalid" Param1 ="$(CurrentNETCoreRuntimex86FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignatureValidNETCoreRuntimex86)'!='True'" />
        <Delete Files="$(DownloadDirWinRuntime)\$(CurrentNETCoreRuntimex86FileName)" Condition="(Exists('$(DownloadDirWinRuntime)\$(CurrentNETCoreRuntimex86FileName)')) AND ( ('$(IsSignedNETCoreRuntimex86)'!='True') OR ('$(IsSignatureValidNETCoreRuntimex86)'!='True'))" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="DownloadWinRuntimex86">
        <CallTarget Targets="_DownloadWindowsDesktopRuntimex86" ContinueOnError="ErrorAndContinue" Condition="'$(IsInstalledVersionHigherOrEqualDownloadWinRuntimex86)'=='False'" />
        <CallTarget Targets="_SetWinRuntimex86InstallSuccessToFalse" Condition="'$(MSBuildLastTaskResult)'=='false'" ContinueOnError="ErrorAndContinue" />

        <CallTarget Targets="_DownloadAspNetCoreRuntimex86" ContinueOnError="ErrorAndContinue" Condition="'$(IsInstalledVersionHigherOrEqualDownloadAspNetCoreRuntimex86)'=='False'" />
        <CallTarget Targets="_SetAspNetCoreRuntimex86InstallSuccessToFalse" Condition="'$(MSBuildLastTaskResult)'=='false'" ContinueOnError="ErrorAndContinue" />

        <CallTarget Targets="_DownloadNETCoreRuntimex86" ContinueOnError="ErrorAndContinue" Condition="'$(IsInstalledVersionHigherOrEqualDownloadNETCoreRuntimex86)'=='False'" />
        <CallTarget Targets="_SetNETCoreRuntimex86InstallSuccessToFalse" Condition="'$(MSBuildLastTaskResult)'=='false'" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="DownloadWebView2Runtimex64">
        <MakeDir Directories='$(DownloadDirWebView2Runtime)' ContinueOnError="ErrorAndContinue" Condition="!Exists('$(DownloadDirWebView2Runtime)')" />
        <DownloadPrerequisites FileUrl="$(DefaultMsiUrl)/Prerequisites/WebView2/" ModuleName="$(CurrentWebView2Runtimex64FileName)" DownloadFolder="$(DownloadDirWebView2Runtime)" Condition="!Exists('$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex64FileName)')" ContinueOnError="ErrorAndContinue"/>
        <DigitalPrerequisiteSignatureVerification FileUrl="$(DefaultMsiUrl)/Prerequisites/WebView2/$(CurrentWebView2Runtimex64FileName)" PrereqLocalLocation="$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex64FileName)" Condition="Exists('$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex64FileName)')" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsSigned" PropertyName="IsSignedWebView2Runtimex64" />
            <Output TaskParameter="IsSignatureValid" PropertyName="IsSignatureValidWebView2Runtimex64" />
        </DigitalPrerequisiteSignatureVerification>
        <DWMessage Text="The installation file '$(CurrentWebView2Runtimex64FileName)' does not have a digital signature." StringId="ErrorMessageSignatureMissing" Param1 ="$(CurrentWebView2Runtimex64FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignedWebView2Runtimex64)'!='True'"/>
        <DWMessage Text="The installation file '$(CurrentWebView2Runtimex64FileName)' has an invalid digital signature. Please contact your administrator." StringId="ErrorMessageSignatureInvalid" Param1 ="$(CurrentWebView2Runtimex64FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignatureValidWebView2Runtimex64)'!='True'" />
        <Delete Files="$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex64FileName)" Condition="(Exists('$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex64FileName)')) AND ( ('$(IsSignedWebView2Runtimex64)'!='True') OR ('$(IsSignatureValidWebView2Runtimex64)'!='True'))" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="DownloadWebView2Runtimex86">
        <MakeDir Directories='$(DownloadDirWebView2Runtime)' ContinueOnError="ErrorAndContinue" Condition="!Exists('$(DownloadDirWebView2Runtime)')" />
        <DownloadPrerequisites FileUrl="$(DefaultMsiUrl)/Prerequisites/WebView2/" ModuleName="$(CurrentWebView2Runtimex86FileName)" DownloadFolder="$(DownloadDirWebView2Runtime)" Condition="!Exists('$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex86FileName)')" ContinueOnError="ErrorAndContinue"/>
        <DigitalPrerequisiteSignatureVerification FileUrl="$(DefaultMsiUrl)/Prerequisites/WebView2/$(CurrentWebView2Runtimex86FileName)" PrereqLocalLocation="$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex86FileName)" Condition="Exists('$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex86FileName)')" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsSigned" PropertyName="IsSignedWebView2Runtimex86" />
            <Output TaskParameter="IsSignatureValid" PropertyName="IsSignatureValidWebView2Runtimex86" />
        </DigitalPrerequisiteSignatureVerification>
        <DWMessage Text="The installation file '$(CurrentWebView2Runtimex86FileName)' does not have a digital signature." StringId="ErrorMessageSignatureMissing" Param1 ="$(CurrentWebView2Runtimex86FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignedWebView2Runtimex86)'!='True'"/>
        <DWMessage Text="The installation file '$(CurrentWebView2Runtimex86FileName)' has an invalid digital signature. Please contact your administrator." StringId="ErrorMessageSignatureInvalid" Param1 ="$(CurrentWebView2Runtimex86FileName)" Param2 ="" Param3 ="" Level="Error" Condition="'$(IsSignatureValidWebView2Runtimex86)'!='True'" />
        <Delete Files="$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex86FileName)" Condition="(Exists('$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex86FileName)')) AND ( ('$(IsSignedWebView2Runtimex86)'!='True') OR ('$(IsSignatureValidWebView2Runtimex86)'!='True'))" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="InstallWebView2Runtimex86">
        <SmartExec Command='"$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex86FileName)" /silent /install' Condition="Exists('$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex86FileName)')" ContinueOnError="ErrorAndContinue"/>
    </Target>

    <Target Name="InstallWebView2Runtimex64">
        <SmartExec Command='"$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex64FileName)"/silent /install' Condition="Exists('$(DownloadDirWebView2Runtime)\$(CurrentWebView2Runtimex64FileName)')" ContinueOnError="ErrorAndContinue"/>
    </Target>

    <Target Name="_InstallWindowsDesktopRuntimex86">
        <SmartExec Command='"$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex86FileName)" /install /quiet /norestart  /log "$(ClientSetupLogsDirectory)\Install.$(CurrentWindowsDesktopRuntimex86FileName.TrimEnd(".exe")).log"' Condition="Exists('$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex86FileName)')" ContinueOnError="ErrorAndContinue"/>
    </Target>
    <Target Name="_InstallAspNetCoreRuntimex86">
        <SmartExec Command='"$(DownloadDirWinRuntime)\$(CurrentAspNetCoreRuntimex86FileName)" /install /quiet /norestart  /log "$(ClientSetupLogsDirectory)\Install.$(CurrentAspNetCoreRuntimex86FileName.TrimEnd(".exe")).log"' Condition="Exists('$(DownloadDirWinRuntime)\$(CurrentAspNetCoreRuntimex86FileName)')" ContinueOnError="ErrorAndContinue"/>
    </Target>
    <Target Name="_InstallNETCoreRuntimex86">
        <SmartExec Command='"$(DownloadDirWinRuntime)\$(CurrentNETCoreRuntimex86FileName)" /install /quiet /norestart  /log "$(ClientSetupLogsDirectory)\Install.$(CurrentNETCoreRuntimex86FileName.TrimEnd(".exe")).log"' Condition="Exists('$(DownloadDirWinRuntime)\$(CurrentNETCoreRuntimex86FileName)')" ContinueOnError="ErrorAndContinue"/>
    </Target>
    <Target Name="InstallWinRuntimex86">
        <CallTarget Targets="_InstallWindowsDesktopRuntimex86" ContinueOnError="ErrorAndContinue" Condition="'$(IsInstalledVersionHigherOrEqualDownloadWinRuntimex86)'=='False'" />
        <CallTarget Targets="_SetWinRuntimex86InstallSuccessToFalse" Condition="'$(MSBuildLastTaskResult)'=='false'" ContinueOnError="ErrorAndContinue" />
        
        <CallTarget Targets="_InstallAspNetCoreRuntimex86" ContinueOnError="ErrorAndContinue" Condition="'$(IsInstalledVersionHigherOrEqualDownloadAspNetCoreRuntimex86)'=='False'" />
        <CallTarget Targets="_SetAspNetCoreRuntimex86InstallSuccessToFalse" Condition="'$(MSBuildLastTaskResult)'=='false'" ContinueOnError="ErrorAndContinue" />
        
        <CallTarget Targets="_InstallNETCoreRuntimex86" ContinueOnError="ErrorAndContinue" Condition="'$(IsInstalledVersionHigherOrEqualDownloadNETCoreRuntimex86)'=='False'" />
        <CallTarget Targets="_SetNETCoreRuntimex86InstallSuccessToFalse" Condition="'$(MSBuildLastTaskResult)'=='false'" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="_InstallWindowsDesktopRuntimex64">
        <SmartExec Command='"$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex64FileName)" /install /quiet /norestart /log "$(ClientSetupLogsDirectory)\Install.$(CurrentWindowsDesktopRuntimex64FileName.TrimEnd(".exe")).log"' Condition="Exists('$(DownloadDirWinRuntime)\$(CurrentWindowsDesktopRuntimex64FileName)')" ContinueOnError="ErrorAndContinue"/>
    </Target>
    <Target Name="InstallWinRuntimex64">
        <CallTarget Targets="_InstallWindowsDesktopRuntimex64" ContinueOnError="ErrorAndContinue" Condition="'$(IsInstalledVersionHigherOrEqualDownloadWinRuntimex64)'=='False'" />
        <CallTarget Targets="_SetWinRuntimex64InstallSuccessToFalse" Condition="'$(MSBuildLastTaskResult)'=='false'" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="InstallCRuntimeV10x86">
        <SmartExec Command='"$(DownloadDirVC100)\vcredist_x86.exe" /q /norestart /log "$(ClientSetupLogsDirectory)\Install.VCRedist100_x86.log"' Condition="Exists('$(DownloadDirVC100)\vcredist_x86.exe')" ContinueOnError="ErrorAndContinue" SuccessExitCodes="$(InstallPrerequisitesSuccessExitCodes)"/>
    </Target>

    <Target Name="InstallCRuntimeV10x64">
        <SmartExec Command='"$(DownloadDirVC100)\vcredist_x64.exe" /q /norestart /log "$(ClientSetupLogsDirectory)\Install.VCRedist100_x64.log"' Condition="Exists('$(DownloadDirVC100)\vcredist_x64.exe')" ContinueOnError="ErrorAndContinue" SuccessExitCodes="$(InstallPrerequisitesSuccessExitCodes)"/>
    </Target>

    <Target Name="InstallCRuntimeV14x86">
        <SmartExec Command='"$(DownloadDirVC140)\vc_redist.x86.exe" /q /norestart /log "$(ClientSetupLogsDirectory)\Install.VCRedist140_x86.log"' Condition="Exists('$(DownloadDirVC140)\vc_redist.x86.exe')" ContinueOnError="ErrorAndContinue" SuccessExitCodes="$(InstallPrerequisitesSuccessExitCodes)"/>
    </Target>


    <Target Name="InstallDesktopFramework" Condition="('$(DesktopFrameworkServerEqualsDownloadedMSI)'=='True') AND ('$(DesktopFrameworkMSIFileIsSigned)'=='True') AND ('$(DesktopFrameworkMSIFileVerification)'=='True') AND ('$(DesktopFrameworkMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployDesktopFramework" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetDesktopFrameworkInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitDesktopFramework" ContinueOnError="ErrorAndContinue" Condition="'$(DesktopFrameworkMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetDesktopFrameworkInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <!-- Start Installing certificate files in case of Install and any update -->
        <CallTarget Targets="_InstallAndAssignDesktopSSLCertificate" ContinueOnError="ErrorAndContinue" />
        <!-- End Installing certificate files in case of Install and any update -->
        <CallTarget Targets="_SetDesktopFrameworkInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_WriteDesktopFrameworkVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessDesktopFramework" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessDesktopFramework">
        <DWMessage Text="Desktop Framework could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Desktop Framework" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallDesktopFramework)'=='False'"/>
    </Target>
    <Target Name="_SetDesktopFrameworkInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallDesktopFramework>False</SuccessfullInstallDesktopFramework>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteDesktopFrameworkVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="DesktopFrameworkMSIFileVersion: $(DesktopFrameworkMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(DesktopFrameWorkMSIName) /t REG_SZ /d "$(DesktopFrameworkMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallDesktopFramework)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(DesktopFrameWorkMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallDesktopFramework)'=='False'" />
    </Target>
    <Target Name="_InstallAndAssignDesktopSSLCertificate">
        <Exec Command='"$(Certutil)" -addstore -f "root" "$(ClientSetupBaseDir)\Desktop\DocuWare GmbH Local Authority.cer"'
              ContinueOnError="ErrorAndContinue" />
        <Exec Command='"$(Certutil)" -f -p "lkrgAS4not3jfqdFOfW3f0rilmaMQia6ybcX30dfQLSTO30w" -importpfx "$(ClientSetupBaseDir)\Desktop\127.0.0.1.pfx"'
              ContinueOnError="ErrorAndContinue" />
        <Exec Command='"$(Netsh)" http add sslcert ipport=127.0.0.1:8091 certhash=EE9426B1C37D0C6A2A273CEB649F46136E9A58B9 appid={2b40e347-ccce-4b67-95f2-86cf93201b85}'
              ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="InstallClientOCR" Condition="('$(ClientOCRServerEqualsDownloadedMSI)'=='True') AND ('$(ClientOCRMSIFileIsSigned)'=='True') AND ('$(ClientOCRMSIFileVerification)'=='True') AND ('$(ClientOCRMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployClientOCR" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetClientOCRInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitClientOCR" ContinueOnError="ErrorAndContinue" Condition="'$(ClientOCRMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetClientOCRInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_WriteClientOCRVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessClientOCR" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessClientOCR">
        <DWMessage Text="Client OCR could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Client OCR" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallClientOCR)'=='False'"/>
    </Target>
    <Target Name="_SetClientOCRInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallClientOCR>False</SuccessfullInstallClientOCR>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteClientOCRVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="ClientOCRMSIFileVersion: $(ClientOCRMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ClientOCRMSIName) /t REG_SZ /d "$(ClientOCRMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallClientOCR)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ClientOCRMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallClientOCR)'=='False'" />
    </Target>

    <Target Name="InstallUpdate" Condition="('$(UpdateServerEqualsDownloadedMSI)'=='True') AND ('$(UpdateMSIFileIsSigned)'=='True') AND ('$(UpdateMSIFileVerification)'=='True') AND ('$(UpdateMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployUpdate" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetUpdateInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitUpdate" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetUpdateInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_WriteUpdateVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessUpdate" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessUpdate">
        <DWMessage Text="Update could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Update" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallUpdate)'=='False'"/>
    </Target>
    <Target Name="_SetUpdateInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallUpdate>False</SuccessfullInstallUpdate>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteUpdateVersionToRegistry">
        <Message Text="UpdateMSIFileVersion: $(UpdateMSIFileVersion)"></Message>
        <!--Add version of downloaded MSI to Registry after install-->
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UpdateMSIName) /t REG_SZ /d "$(UpdateMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallUpdate)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UpdateMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallUpdate)'=='False'" />
    </Target>

    <Target Name="InstallC2Outlook" Condition="('$(C2OutlookServerEqualsDownloadedMSI)'=='True') AND ('$(C2OutlookMSIFileIsSigned)'=='True') AND ('$(C2OutlookMSIFileVerification)'=='True') AND ('$(C2OutlookMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_StopConnectToOutlookInstall" ContinueOnError="ErrorAndContinue" Condition="(('$(CRuntimeV10x86InstallSuccess)'=='True') AND ('$(CRuntimeV14x86InstallSuccess)'=='True') AND ('$(WebView2Runtimex64InstallSuccess)'=='True') AND ('$(WebView2Runtimex86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_DeployC2Outlook" ContinueOnError="ErrorAndContinue" Condition="(('$(CRuntimeV10x86InstallSuccess)'=='True') AND ('$(CRuntimeV14x86InstallSuccess)'=='True') AND ('$(WebView2Runtimex64InstallSuccess)'=='True') AND ('$(WebView2Runtimex86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetC2OutlookInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitC2Outlook" ContinueOnError="ErrorAndContinue" Condition="'$(C2OutlookMinorUpdate)'!='True' AND (('$(CRuntimeV10x86InstallSuccess)'=='True') AND ('$(CRuntimeV14x86InstallSuccess)'=='True') AND ('$(WebView2Runtimex64InstallSuccess)'=='True') AND ('$(WebView2Runtimex86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetC2OutlookInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetC2OutlookInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="(('$(CRuntimeV10x86InstallSuccess)'!='True') OR ('$(CRuntimeV14x86InstallSuccess)'!='True') OR ('$(WebView2Runtimex64InstallSuccess)'!='True') OR ('$(WebView2Runtimex86InstallSuccess)'!='True'))" />
        <CallTarget Targets="_WriteC2OutlookVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessC2Outlook" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessC2Outlook">
        <DWMessage Text="Connect to Outlook could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Connect to Outlook" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallC2Outlook)'=='False'"/>
    </Target>
    <Target Name="_SetC2OutlookInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallC2Outlook>False</SuccessfullInstallC2Outlook>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteC2OutlookVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="C2OutlookMSIFileVersion: $(C2OutlookMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(C2OutlookMSIName) /t REG_SZ /d "$(C2OutlookMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallC2Outlook)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(C2OutlookMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallC2Outlook)'=='False'" />
    </Target>

    <Target Name="InstallEditSend" Condition="('$(EditSendServerEqualsDownloadedMSI)'=='True') AND ('$(EditSendMSIFileIsSigned)'=='True') AND ('$(EditSendMSIFileVerification)'=='True') AND ('$(EditSendMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployEditSend" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetEditSendInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitEditSend" ContinueOnError="ErrorAndContinue" Condition="'$(EditSendMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetEditSendInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_WriteEditSendToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessEditSend" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessEditSend">
        <DWMessage Text="Edit %26 Send could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Edit %26 Send" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallEditSend)'=='False'"/>
    </Target>
    <Target Name="_SetEditSendInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallEditSend>False</SuccessfullInstallEditSend>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteEditSendToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="EditSendMSIFileVersion: $(EditSendMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(EditSendMSIName) /t REG_SZ /d "$(EditSendMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallEditSend)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(EditSendMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallEditSend)'=='False'" />
    </Target>

    <Target Name="InstallAdminTool" Condition="('$(AdminToolServerEqualsDownloadedMSI)'=='True') AND ('$(AdminToolMSIFileIsSigned)'=='True') AND ('$(AdminToolMSIFileVerification)'=='True') AND ('$(AdminToolMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployAdminTool" ContinueOnError="ErrorAndContinue" Condition="('$(CRuntimeV14x86InstallSuccess)'=='True')" />
        <CallTarget Targets="_SetAdminToolInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitAdminTool" ContinueOnError="ErrorAndContinue" Condition="'$(AdminToolMinorUpdate)'!='True' AND ('$(CRuntimeV14x86InstallSuccess)'=='True')" />
        <CallTarget Targets="_SetAdminToolInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetAdminToolInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="('$(CRuntimeV14x86InstallSuccess)'!='True')" />
        <CallTarget Targets="_WriteAdminToolVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessAdminTool" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessAdminTool">
        <DWMessage Text="Administration could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Administration" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallAdminTool)'=='False'"/>
    </Target>
    <Target Name="_SetAdminToolInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallAdminTool>False</SuccessfullInstallAdminTool>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteAdminToolVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="AdminToolMSIFileVersion: $(AdminToolMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(AdminToolMSIName) /t REG_SZ /d "$(AdminToolMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallAdminTool)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(AdminToolMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallAdminTool)'=='False'" />
    </Target>

    <Target Name="InstallScanner" Condition="('$(ScannerServerEqualsDownloadedMSI)'=='True') AND ('$(ScannerMSIFileIsSigned)'=='True') AND ('$(ScannerMSIFileVerification)'=='True') AND ('$(ScannerMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployScanner" ContinueOnError="ErrorAndContinue" Condition="('$(CRuntimeV14x86InstallSuccess)'=='True')" />
        <CallTarget Targets="_SetScannerInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitScanner" ContinueOnError="ErrorAndContinue" Condition="'$(ScannerMinorUpdate)'!='True' AND ('$(CRuntimeV14x86InstallSuccess)'=='True')" />
        <CallTarget Targets="_SetScannerInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetScannerInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="('$(CRuntimeV14x86InstallSuccess)'!='True')" />
        <CallTarget Targets="_WriteScannerVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessScanner" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessScanner">
        <DWMessage Text="Scan could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Scan" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallScanner)'=='False'"/>
    </Target>
    <Target Name="_SetScannerInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallScanner>False</SuccessfullInstallScanner>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteScannerVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="ScannerMSIFileVersion: $(ScannerMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ScannerMSIName) /t REG_SZ /d "$(ScannerMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallScanner)'=='True' "/>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ScannerMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallScanner)'=='False' "/>
    </Target>

    <Target Name="InstallExport" Condition="('$(ExportServerEqualsDownloadedMSI)'=='True') AND ('$(ExportMSIFileIsSigned)'=='True') AND ('$(ExportMSIFileVerification)'=='True') AND ('$(ExportMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployExport" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetExportInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitExport" ContinueOnError="ErrorAndContinue" Condition="'$(ExportMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetExportInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_WriteExportVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessExport" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessExport">
        <DWMessage Text="Export could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Export" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallExport)'=='False'"/>
    </Target>
    <Target Name="_SetExportInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallExport>False</SuccessfullInstallExport>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteExportVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="ExportMSIFileVersion: $(ExportMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ExportMSIName) /t REG_SZ /d "$(ExportMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallExport)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ExportMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallExport)'=='False'" />
    </Target>

    <Target Name="InstallImport" Condition="('$(ImportServerEqualsDownloadedMSI)'=='True') AND ('$(ImportMSIFileIsSigned)'=='True') AND ('$(ImportMSIFileVerification)'=='True') AND ('$(ImportMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployImport" ContinueOnError="ErrorAndContinue" Condition="('$(CRuntimeV14x86InstallSuccess)'=='True')" />
        <CallTarget Targets="_SetImportInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitImport" ContinueOnError="ErrorAndContinue" Condition="'$(ImportMinorUpdate)'!='True' AND ('$(CRuntimeV14x86InstallSuccess)'=='True')" />
        <CallTarget Targets="_SetImportInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetImportInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="('$(CRuntimeV14x86InstallSuccess)'!='True')" />
        <CallTarget Targets="_WriteImportVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessImport" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessImport">
        <DWMessage Text="Import could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Import" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallImport)'=='False'"/>
    </Target>
    <Target Name="_SetImportInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallImport>False</SuccessfullInstallImport>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteImportVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="ImportMSIFileVersion: $(ImportMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ImportMSIName) /t REG_SZ /d "$(ImportMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallImport)'=='True' "/>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ImportMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallImport)'=='False' "/>
    </Target>

    <Target Name="InstallPrinter" Condition="('$(PrinterServerEqualsDownloadedMSI)'=='True') AND ('$(PrinterMSIFileIsSigned)'=='True') AND ('$(PrinterMSIFileVerification)'=='True') AND ('$(PrinterMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployPrinter" ContinueOnError="ErrorAndContinue" Condition="(('$(CRuntimeV10x86InstallSuccess)'=='True') AND ('$(CRuntimeV10x64InstallSuccess)'=='True') AND ('$(CRuntimeV14x86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetPrinterInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitPrinter" ContinueOnError="ErrorAndContinue" Condition="'$(PrinterMinorUpdate)'!='True' AND (('$(CRuntimeV10x86InstallSuccess)'=='True') AND ('$(CRuntimeV10x64InstallSuccess)'=='True') AND ('$(CRuntimeV14x86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetPrinterInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetPrinterInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="(('$(CRuntimeV10x86InstallSuccess)'!='True') OR ('$(CRuntimeV10x64InstallSuccess)'!='True') OR ('$(CRuntimeV14x86InstallSuccess)'!='True'))" />
        <CallTarget Targets="_WritePrinterVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessPrinter" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessPrinter">
        <DWMessage Text="Printer could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Printer" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallPrinter)'=='False'"/>
    </Target>
    <Target Name="_SetPrinterInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallPrinter>False</SuccessfullInstallPrinter>
        </PropertyGroup>
    </Target>
    <Target Name="_WritePrinterVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="PrinterMSIFileVersion: $(PrinterMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(PrinterMSIName) /t REG_SZ /d "$(PrinterMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallPrinter)'=='True' "/>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(PrinterMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallPrinter)'=='False' "/>
    </Target>

    <Target Name="InstallSmartConnect" Condition="('$(SmartConnectServerEqualsDownloadedMSI)'=='True') AND ('$(SmartConnectMSIFileIsSigned)'=='True') AND ('$(SmartConnectMSIFileVerification)'=='True') AND ('$(SmartConnectMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeploySmartConnect" ContinueOnError="ErrorAndContinue" Condition="(('$(CRuntimeV10x86InstallSuccess)'=='True') AND ('$(CRuntimeV10x64InstallSuccess)'=='True') AND ('$(CRuntimeV14x86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetSmartConnectInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitSmartConnect" ContinueOnError="ErrorAndContinue" Condition="'$(SmartConnectMinorUpdate)'!='True' AND (('$(CRuntimeV10x86InstallSuccess)'=='True') AND ('$(CRuntimeV10x64InstallSuccess)'=='True') AND ('$(CRuntimeV14x86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetSmartConnectInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetSmartConnectInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="(('$(CRuntimeV10x86InstallSuccess)'!='True') OR ('$(CRuntimeV10x64InstallSuccess)'!='True') OR ('$(CRuntimeV14x86InstallSuccess)'!='True'))" />
        <CallTarget Targets="_WriteSmartConnectVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessSmartConnect" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessSmartConnect">
        <DWMessage Text="Smart Connect could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Smart Connect" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallSmartConnect)'=='False'"/>
    </Target>
    <Target Name="_SetSmartConnectInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallSmartConnect>False</SuccessfullInstallSmartConnect>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteSmartConnectVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="SmartConnectMSIFileVersion: $(SmartConnectMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(SmartConnectMSIName) /t REG_SZ /d "$(SmartConnectMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallSmartConnect)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(SmartConnectMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallSmartConnect)'=='False'" />
    </Target>

    <Target Name="InstallWEC" Condition="('$(WECServerEqualsDownloadedMSI)'=='True') AND ('$(WECMSIFileIsSigned)'=='True') AND ('$(WECMSIFileVerification)'=='True') AND ('$(WECMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployWEC" ContinueOnError="ErrorAndContinue" Condition="(('$(WinRuntimex64InstallSuccess)'=='True') AND ('$(WinRuntimex86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetWECInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitWEC" ContinueOnError="ErrorAndContinue" Condition="'$(WECMinorUpdate)'!='True' AND (('$(WinRuntimex64InstallSuccess)'=='True') AND ('$(WinRuntimex86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetWECInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetWECInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="(('$(WinRuntimex64InstallSuccess)'!='True') OR ('$(WinRuntimex86InstallSuccess)'!='True'))" />
        <CallTarget Targets="_WriteWECVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessWEC" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessWEC">
        <DWMessage Text="Windows Explorer Client could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Windows Explorer Client" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallWEC)'=='False'"/>
    </Target>
    <Target Name="_SetWECInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallWEC>False</SuccessfullInstallWEC>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteWECVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="WECMSIFileVersion: $(WECMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WECMSIName) /t REG_SZ /d "$(WECMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallWEC)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WECMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallWEC)'=='False'" />
    </Target>

    <Target Name="InstallWECServer" Condition="('$(WECServerServerEqualsDownloadedMSI)'=='True') AND ('$(WECServerMSIFileIsSigned)'=='True') AND ('$(WECServerMSIFileVerification)'=='True') AND ('$(WECServerMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployWECServer" ContinueOnError="ErrorAndContinue" Condition="(('$(WinRuntimex64InstallSuccess)'=='True') AND ('$(WinRuntimex86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetWECServerInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitWECServer" ContinueOnError="ErrorAndContinue" Condition="'$(WECServerMinorUpdate)'!='True' AND (('$(WinRuntimex64InstallSuccess)'=='True') AND ('$(WinRuntimex86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetWECServerInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetWECServerInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="(('$(WinRuntimex64InstallSuccess)'!='True') OR ('$(WinRuntimex86InstallSuccess)'!='True'))" />
        <CallTarget Targets="_WriteWECServerVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessWECServer" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessWECServer">
        <DWMessage Text="Windows Explorer Client Server could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Windows Explorer Client Server" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallWECServer)'=='False'"/>
    </Target>
    <Target Name="_SetWECServerInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallWECServer>False</SuccessfullInstallWECServer>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteWECServerVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="WECServerMSIFileVersion: $(WECServerMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WECServerMSIName) /t REG_SZ /d "$(WECServerMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallWECServer)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WECServerMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallWECServer)'=='False'" />
    </Target>

    <Target Name="InstallWorkflowDesigner" Condition="('$(WorkflowDesignerServerEqualsDownloadedMSI)'=='True') AND ('$(WorkflowDesignerMSIFileIsSigned)'=='True') AND ('$(WorkflowDesignerMSIFileVerification)'=='True') AND ('$(WorkflowDesignerMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployWorkflowDesigner" ContinueOnError="ErrorAndContinue" Condition="(('$(WebView2Runtimex64InstallSuccess)'=='True') AND ('$(WebView2Runtimex86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetWorkflowDesignerInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitWorkflowDesigner" ContinueOnError="ErrorAndContinue" Condition="'$(WorkflowDesignerMinorUpdate)'!='True' AND (('$(WebView2Runtimex64InstallSuccess)'=='True') AND ('$(WebView2Runtimex86InstallSuccess)'=='True'))" />
        <CallTarget Targets="_SetWorkflowDesignerInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetWorkflowDesignerInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="(('$(WebView2Runtimex64InstallSuccess)'!='True') OR ('$(WebView2Runtimex86InstallSuccess)'!='True'))" />
        <CallTarget Targets="_WriteWorkflowDesignerVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessWorkflowDesigner" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessWorkflowDesigner">
        <DWMessage Text="Workflow Designer could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Workflow Designer" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallWorkflowDesigner)'=='False'"/>
    </Target>
    <Target Name="_SetWorkflowDesignerInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallWorkflowDesigner>False</SuccessfullInstallWorkflowDesigner>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteWorkflowDesignerVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="WorkflowDesignerMSIFileVersion: $(WorkflowDesignerMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WorkflowDesignerMSIName) /t REG_SZ /d "$(WorkflowDesignerMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallWorkflowDesigner)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WorkflowDesignerMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallWorkflowDesigner)'=='False'" />
    </Target>

    <Target Name="InstallUrlCreator" Condition="('$(UrlCreatorServerEqualsDownloadedMSI)'=='True') AND ('$(UrlCreatorMSIFileIsSigned)'=='True') AND ('$(UrlCreatorMSIFileVerification)'=='True') AND ('$(UrlCreatorMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployUrlCreator" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetUrlCreatorInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitUrlCreator" ContinueOnError="ErrorAndContinue" Condition="'$(UrlCreatorMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetUrlCreatorInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_WriteUrlCreatorVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessURLCreator" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessURLCreator">
        <DWMessage Text="URL Creator could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="URL Creator" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallUrlCreator)'=='False'"/>
    </Target>
    <Target Name="_SetUrlCreatorInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallUrlCreator>False</SuccessfullInstallUrlCreator>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteUrlCreatorVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="UrlCreatorMSIFileVersion: $(UrlCreatorMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UrlCreatorMSIName) /t REG_SZ /d "$(UrlCreatorMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallUrlCreator)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UrlCreatorMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallUrlCreator)'=='False'" />
    </Target>

    <Target Name="InstallLocalDataConnector" Condition="('$(LocalDataConnectorServerEqualsDownloadedMSI)'=='True') AND ('$(LocalDataConnectorMSIFileIsSigned)'=='True') AND ('$(LocalDataConnectorMSIFileVerification)'=='True') AND ('$(LocalDataConnectorMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployLocalDataConnector" ContinueOnError="ErrorAndContinue" Condition="('$(WinRuntimex86InstallSuccess)'=='True' AND '$(AspNetCoreRuntimex86InstallSuccess)'=='True' AND '$(NETCoreRuntimex86InstallSuccess)'=='True')"/>
        <CallTarget Targets="_SetLocalDataConnectorInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitLocalDataConnector" ContinueOnError="ErrorAndContinue" Condition="'$(LocalDataConnectorMinorUpdate)'!='True' AND ('$(WinRuntimex86InstallSuccess)'=='True' AND '$(AspNetCoreRuntimex86InstallSuccess)'=='True' AND '$(NETCoreRuntimex86InstallSuccess)'=='True')" />
        <CallTarget Targets="_SetLocalDataConnectorInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_SetLocalDataConnectorInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="('$(WinRuntimex86InstallSuccess)'!='True' OR '$(AspNetCoreRuntimex86InstallSuccess)'!='True' OR '$(NETCoreRuntimex86InstallSuccess)'!='True')" />
        <CallTarget Targets="_WriteLocalDataConnectorVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessLocalDataConnector" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessLocalDataConnector">
        <DWMessage Text="Local Data Connector could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="Local Data Connector" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallLocalDataConnector)'=='False'"/>
    </Target>
    <Target Name="_SetLocalDataConnectorInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallLocalDataConnector>False</SuccessfullInstallLocalDataConnector>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteLocalDataConnectorVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="LocalDataConnectorMSIFileVersion: $(LocalDataConnectorMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(LocalDataConnectorMSIName) /t REG_SZ /d "$(LocalDataConnectorMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallLocalDataConnector)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(LocalDataConnectorMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallLocalDataConnector)'=='False'" />
    </Target>

    <Target Name="InstallUserSynchronization" Condition="('$(UserSynchronizationServerEqualsDownloadedMSI)'=='True') AND ('$(UserSynchronizationMSIFileIsSigned)'=='True') AND ('$(UserSynchronizationMSIFileVerification)'=='True') AND ('$(UserSynchronizationMSIFileThumbprintVerification)'=='True')">
        <CallTarget Targets="_DeployUserSynchronization" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetUserSynchronizationInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitUserSynchronization" ContinueOnError="ErrorAndContinue" Condition="'$(UserSynchronizationMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetUserSynchronizationInstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_WriteUserSynchronizationVersionToRegistry" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_DisplayInstallSuccessUserSynchronization" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayInstallSuccessUserSynchronization">
        <DWMessage Text="User Synchronization could not be installed due to an error. You can click retry or module will not be usable until next setup execution." StringId="ModuleFailedToInstall" Param1="User Synchronization" Param2="" Param3="" Level="Error" Condition="'$(SuccessfullInstallUserSynchronization)'=='False'"/>
    </Target>
    <Target Name="_SetUserSynchronizationInstallSuccess">
        <PropertyGroup>
            <SuccessfullInstallUserSynchronization>False</SuccessfullInstallUserSynchronization>
        </PropertyGroup>
    </Target>
    <Target Name="_WriteUserSynchronizationVersionToRegistry">
        <!--Add version of downloaded MSI to Registry after install-->
        <Message Text="UserSynchronizationMSIFileVersion: $(UserSynchronizationMSIFileVersion)"></Message>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UserSynchronizationMSIName) /t REG_SZ /d "$(UserSynchronizationMSIFileVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallUserSynchronization)'=='True'" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UserSynchronizationMSIName) /t REG_SZ /d "$(RegistryVersionForFailedInstall)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(SuccessfullInstallUserSynchronization)'=='False'" />
    </Target>

    <Target Name="StopDesktop">
        <WindowsServiceHandling ServiceName="DWDesktopService" Command="Stop" ContinueOnError="ErrorAndContinue" />
        <EnsureProcessIsTerminated ProcessImageName="DocuWare.DesktopService" SecondsToWaitBeforeKill="10"
                                   ContinueOnError="ErrorAndContinue" />

        <ApplicationTerminator ApplicationExecutable="DocuWare.Desktop.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.OCR.Services.ProviderServiceConsole.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.Printer.Setup.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="LogCollector.Client.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.Desktop.CaptureService.Host.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="ChromeNativeMessaging.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.Desktop.SmartConnect.BringWindowToFront.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.Desktop.SmartConnect.Hooker.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.Desktop.SmartConnect.PDC.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="FuncServer_x64.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="FuncServer_x86.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="ScreenScrapeJavaSupport.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="SetupExtensions.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="UiLauncher.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StartDesktop">
        <WindowsServiceHandling ServiceName="DWDesktopService" Command="Start" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StopDWClientUpdateService">
        <WindowsServiceHandling ServiceName="DWClientUpdateService" Command="Stop" ReportError="false" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StartDWClientUpdateService">
        <WindowsServiceHandling ServiceName="DWClientUpdateService" Command="Start" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StopExport">
        <ApplicationTerminator ApplicationExecutable="DocuWare.Export.exe" SecondsToWait="$(ExportTerminateWaitTimeout)" ReportError="false" ContinueOnError="ErrorAndContinue" />
        <IsProcessRunning ProcessName="DocuWare.Export">
            <Output TaskParameter="IsRunning" PropertyName="ExportIsRunning" />
        </IsProcessRunning>
        <DWMessage Text="Export Tool could not be stopped. Update is skipped." StringId="MSBuildClosingExport" Param1="" Param2="" Param3="" Level="Warning" Condition="'$(ExportIsRunning)'=='True'" ContinueOnError="ErrorAndContinue"/>
    </Target>

    <Target Name="StopLocalDataConnector">
        <WindowsServiceHandling ServiceName="DWLocalDataConnector" Command="Stop" ContinueOnError="ErrorAndContinue" />
        <EnsureProcessIsTerminated ProcessImageName="Local Data Connector Service" SecondsToWaitBeforeKill="10"
                                   ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="Local Data Connector Administration.exe" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StartLocalDataConnector">
        <WindowsServiceHandling ServiceName="DWLocalDataConnector" Command="Start" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="_EnableUpdate">
        <SmartExec Command='"$(Schtasks)" /Change /Enable /TN "DocuWare Update"'
                   ContinueOnError="ErrorAndContinue" SuccessExitCodes="$(SchtasksSuccessExitCodes)" />
    </Target>

    <Target Name="StopUpdate">
        <ApplicationTerminator ApplicationExecutable="DocuWare.Update.exe" AllowKill="True" ReportError="false" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.Setup.Client.Update.exe" AllowKill="True" ReportError="false" ContinueOnError="ErrorAndContinue" />

        <SmartExec Command='"$(Schtasks)" /Change /Disable /TN "DocuWare Update"'
                   ContinueOnError="ErrorAndContinue" SuccessExitCodes="$(SchtasksSuccessExitCodes)" />
    </Target>

    <Target Name="StopAdministration">
        <ApplicationTerminator ApplicationExecutable="DocuWare.Administration.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StopWindowsExplorerClient">
        <ApplicationTerminator ApplicationExecutable="DocuWare.PlatformUIProcess.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StopWindowsExplorerClientServer">
        <ApplicationTerminator ApplicationExecutable="DocuWare.WindowsExplorerClient.ServerComponent.exe" AllowKill="True" SecondsToWait="$(WECServerTerminateWaitTimeout)" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StopConnectToOutlook">
        <IsProcessRunning ProcessName="OUTLOOK">
            <Output TaskParameter="IsRunning" PropertyName="OutlookIsRunningInstall" />
        </IsProcessRunning>
        <DWMessage Text="Closing Outlook" StringId="MSBuildClosingOutlook" Param1="" Param2="" Param3="" Level="Warning" Condition="'$(IsCommandLine)'=='True' AND $(OutlookIsRunningInstall)" ContinueOnError="ErrorAndContinue"/>
        <ApplicationTerminator ApplicationExecutable="Outlook.exe" AllowKill="True" SecondsToWait="$(C2OutlookTerminateWaitTimeout)" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.PlatformUIProcess.exe" />
    </Target>

    <Target Name="_StopConnectToOutlookInstall">
        <IsProcessRunning ProcessName="OUTLOOK">
            <Output TaskParameter="IsRunning" PropertyName="OutlookIsRunningInstall" />
        </IsProcessRunning>
        <ApplicationTerminator ApplicationExecutable="Outlook.exe" AllowKill="True" SecondsToWait="$(C2OutlookTerminateWaitTimeout)" Condition="$(OutlookIsRunningInstall)" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.PlatformUIProcess.exe" Condition="$(OutlookIsRunningInstall)" />
    </Target>

    <Target Name="_StopConnectToOutlookUninstall">
        <IsProcessRunning ProcessName="OUTLOOK">
            <Output TaskParameter="IsRunning" PropertyName="OutlookIsRunningUninstall" />
        </IsProcessRunning>
        <ApplicationTerminator ApplicationExecutable="Outlook.exe" AllowKill="True" SecondsToWait="$(C2OutlookTerminateWaitTimeout)" Condition="$(OutlookIsRunningUninstall)" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.PlatformUIProcess.exe" Condition="$(OutlookIsRunningUninstall)" />
    </Target>

    <Target Name="StopOCR">
        <ApplicationTerminator ApplicationExecutable="DocuWare.Tools.ToolkitDistribution.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StopUrlCreator">
        <ApplicationTerminator ApplicationExecutable="DocuWare.URLCreator.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StopUserSynchronization">
        <ApplicationTerminator ApplicationExecutable="DocuWare.ADSync.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="StopWorkflowDesigner">
        <ApplicationTerminator ApplicationExecutable="DocuWare.WorkflowManager.Designer.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
        <ApplicationTerminator ApplicationExecutable="DocuWare.Bpw.Designer.exe" AllowKill="True" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="CleanUpDownloadDirectory">
        <Exec Command='rmdir /S /Q "$(ClientSetupDownloadDir)"' ContinueOnError="ErrorAndContinue" Condition="Exists('$(ClientSetupDownloadDir)')" />
    </Target>

    <Target Name="_UninstallRetiredUploadService">
        <UninstallModule UpgradeCode="{160757C3-4D73-413F-81ED-68D2F684C76F}" LogFileName="$(ClientSetupLogsDirectory)\Uninstall.DocuWare.UploadService.log" ContinueOnError="ErrorAndContinue"/>
    </Target>

    <Target Name="_CalculateOldConnectToToshibaInstallDirectory">
        <PropertyGroup>
            <OldConnectToToshibaInstallationDirectory>$(Registry:HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\DWCONNECTtoToshiba@ImagePath)</OldConnectToToshibaInstallationDirectory>
            <OldConnectToToshibaInstallationDirectory Condition="'$(OldConnectToToshibaInstallationDirectory)' != ''">$(OldConnectToToshibaInstallationDirectory.TrimStart('"'))</OldConnectToToshibaInstallationDirectory>
            <OldConnectToToshibaInstallationDirectory Condition="'$(OldConnectToToshibaInstallationDirectory)' != '' AND $(OldConnectToToshibaInstallationDirectory.Contains('\CONNECTtoToshibaServer'))">$(OldConnectToToshibaInstallationDirectory.Remove($(OldConnectToToshibaInstallationDirectory.IndexOf("\CONNECTtoToshibaServer"))))</OldConnectToToshibaInstallationDirectory>
        </PropertyGroup>
    </Target>

    <Target Name="_UninstallRetiredConnectToToshiba" DependsOnTargets="_CalculateOldConnectToToshibaInstallDirectory">
        <UninstallModule UpgradeCode="{D6B0D30E-676A-458E-80CD-1254D5953052}" LogFileName="$(ClientSetupLogsDirectory)\Uninstall.DocuWare.ConnectToToshiba.log" ContinueOnError="ErrorAndContinue"/>
        <!-- Remove files created during runtime and the directory-->
        <ItemGroup>
            <ConnectToToshibaFilesAndFolders Include="$(OldConnectToToshibaInstallationDirectory)\**\*.*" />
        </ItemGroup>
        <Delete Files="@(ConnectToToshibaFilesAndFolders)" ContinueOnError="ErrorAndContinue" Condition="'$(OldConnectToToshibaInstallationDirectory)' != ''" />
        <Exec Command='rmdir /S /Q "$(OldConnectToToshibaInstallationDirectory)"' ContinueOnError="ErrorAndContinue" Condition="('$(OldConnectToToshibaInstallationDirectory)' != '') AND (Exists('$(OldConnectToToshibaInstallationDirectory)'))" />
    </Target>
  
    <Target Name="_UninstallRetiredIndexCleaner">
      <UninstallModule UpgradeCode="{99544C3F-4F02-4B70-8A6B-B77B5E0EBABC}" LogFileName="$(ClientSetupLogsDirectory)\Uninstall.DocuWare.IndexCleaner.log" ContinueOnError="ErrorAndContinue"/>
      <!-- Remove Msi Version from Registry -->
      <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v "DocuWare.IndexCleaner.msi" /f /reg:32'
                 ContinueOnError="ErrorAndContinue"
                 SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                 Condition="'$(SuccessfullUninstallIndexCleaner)'!='False'" />
      
      <!-- Remove Shortcut -->
      <Delete Files="$(AllUsersProfile)\Microsoft\Windows\Start Menu\Programs\DocuWare\DocuWare Index Cleaner.lnk"
              ContinueOnError="ErrorAndContinue"
              Condition="Exists('$(AllUsersProfile)\Microsoft\Windows\Start Menu\Programs\DocuWare\DocuWare Index Cleaner.lnk')" />
      
      <!--Delete StartMenu Shortcut folders if emtpy-->
      <Exec Command='rmdir "$(AllUsersProfile)\Microsoft\Windows\Start Menu\Programs\DocuWare"'
            ContinueOnError="ErrorAndContinue"
            Condition="Exists('$(AllUsersProfile)\Microsoft\Windows\Start Menu\Programs\DocuWare')" />
    </Target>
  
    <Target Name="CleanSystem">
        <CallTarget Targets="_UninstallRetiredIndexCleaner" Condition="'$(CurrentInstallStateRetiredIndexCleaner)'=='True'" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_UninstallRetiredUploadService" Condition="'$(CurrentInstallStateRetiredUploadService)'=='True'" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_UninstallRetiredConnectToToshiba" Condition="'$(CurrentInstallStateRetiredC2Toshiba)'=='True'" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="RequiredDiskSpaceCheck" DependsOnTargets="_DetectUpdateMode">
        <PropertyGroup>
            <CalculateDiskSpaceForC2Outlook>False</CalculateDiskSpaceForC2Outlook>
            <CalculateDiskSpaceForC2Outlook Condition="(!$(CurrentInstallStateC2Outlook) AND $(C2Outlook)) OR '$(C2OutlookRelease)'=='True' OR '$(C2OutlookMinorUpdate)'=='True' ">True</CalculateDiskSpaceForC2Outlook>
            <CalculateDiskSpaceForEditSend>False</CalculateDiskSpaceForEditSend>
            <CalculateDiskSpaceForEditSend Condition="(!$(CurrentInstallStateEditSend) AND $(EditSend)) OR '$(EditSendRelease)'=='True' OR '$(EditSendMinorUpdate)'=='True'">True</CalculateDiskSpaceForEditSend>
            <CalculateDiskSpaceForAdminTool>False</CalculateDiskSpaceForAdminTool>
            <CalculateDiskSpaceForAdminTool Condition="(!$(CurrentInstallStateAdminTool) AND $(AdminTool)) OR '$(AdminToolRelease)'=='True' OR '$(AdminToolMinorUpdate)'=='True'">True</CalculateDiskSpaceForAdminTool>
            <CalculateDiskSpaceForScanner>False</CalculateDiskSpaceForScanner>
            <CalculateDiskSpaceForScanner Condition="(!$(CurrentInstallStateScanner) AND $(Scanner)) OR '$(ScannerRelease)'=='True' OR '$(ScannerMinorUpdate)'=='True'">True</CalculateDiskSpaceForScanner>
            <CalculateDiskSpaceForExport>False</CalculateDiskSpaceForExport>
            <CalculateDiskSpaceForExport Condition="(!$(CurrentInstallStateExport) AND $(Export)) OR '$(ExportRelease)'=='True' OR '$(ExportMinorUpdate)'=='True'">True</CalculateDiskSpaceForExport>
            <CalculateDiskSpaceForImport>False</CalculateDiskSpaceForImport>
            <CalculateDiskSpaceForImport Condition="(!$(CurrentInstallStateImport) AND $(Import)) OR '$(ImportRelease)'=='True' OR '$(ImportMinorUpdate)'=='True'">True</CalculateDiskSpaceForImport>
            <CalculateDiskSpaceForPrinter>False</CalculateDiskSpaceForPrinter>
            <CalculateDiskSpaceForPrinter Condition="(!$(CurrentInstallStatePrinter) AND $(Printer)) OR '$(PrinterRelease)'=='True' OR '$(PrinterMinorUpdate)'=='True'">True</CalculateDiskSpaceForPrinter>
            <CalculateDiskSpaceForSmartConnect>False</CalculateDiskSpaceForSmartConnect>
            <CalculateDiskSpaceForSmartConnect Condition="(!$(CurrentInstallStateSmartConnect) AND $(SmartConnect)) OR '$(SmartConnectRelease)'=='True' OR '$(SmartConnectMinorUpdate)'=='True'">True</CalculateDiskSpaceForSmartConnect>
            <CalculateDiskSpaceForWEC>False</CalculateDiskSpaceForWEC>
            <CalculateDiskSpaceForWEC Condition="(!$(CurrentInstallStateWEC) AND $(WEC)) OR '$(WECRelease)'=='True' OR '$(WECMinorUpdate)'=='True'">True</CalculateDiskSpaceForWEC>
            <CalculateDiskSpaceForWECServer>False</CalculateDiskSpaceForWECServer>
            <CalculateDiskSpaceForWECServer Condition="(!$(CurrentInstallStateWECServer) AND $(WECServer)) OR '$(WECServerRelease)'=='True' OR '$(WECServerMinorUpdate)'=='True'">True</CalculateDiskSpaceForWECServer>
            <CalculateDiskSpaceForWorkflowDesigner>False</CalculateDiskSpaceForWorkflowDesigner>
            <CalculateDiskSpaceForWorkflowDesigner Condition="(!$(CurrentInstallStateWorkflowDesigner) AND $(WorkflowDesigner)) OR '$(WorkflowDesignerRelease)'=='True' OR '$(WorkflowDesignerMinorUpdate)'=='True'">True</CalculateDiskSpaceForWorkflowDesigner>
            <CalculateDiskSpaceForUrlCreator>False</CalculateDiskSpaceForUrlCreator>
            <CalculateDiskSpaceForUrlCreator Condition="(!$(CurrentInstallStateUrlCreator) AND $(UrlCreator)) OR '$(UrlCreatorRelease)'=='True' OR '$(UrlCreatorMinorUpdate)'=='True'">True</CalculateDiskSpaceForUrlCreator>
            <CalculateDiskSpaceForLocalDataConnector>False</CalculateDiskSpaceForLocalDataConnector>
            <CalculateDiskSpaceForLocalDataConnector Condition="(!$(CurrentInstallStateLocalDataConnector) AND $(LocalDataConnector)) OR '$(LocalDataConnectorRelease)'=='True' OR '$(LocalDataConnectorMinorUpdate)'=='True'">True</CalculateDiskSpaceForLocalDataConnector>
            <CalculateDiskSpaceForUserSynchronization>False</CalculateDiskSpaceForUserSynchronization>
            <CalculateDiskSpaceForUserSynchronization Condition="(!$(CurrentInstallStateUserSynchronization) AND $(UserSynchronization)) OR '$(UserSynchronizationRelease)'=='True' OR '$(UserSynchronizationMinorUpdate)'=='True'">True</CalculateDiskSpaceForUserSynchronization>
            <CalculateDiskSpaceForDesktop>False</CalculateDiskSpaceForDesktop>
            <CalculateDiskSpaceForDesktop Condition="(('$(C2Outlook)'=='True' OR '$(EditSend)'=='True' OR '$(AdminTool)'=='True' OR '$(Export)'=='True' OR '$(Import)'=='True' OR '$(Scanner)'=='True' OR '$(SmartConnect)'=='True' OR '$(Printer)'=='True' OR '$(WEC)'=='True' OR '$(WorkflowDesigner)'=='True') AND '$(CurrentInstallStateDesktopFramework)'=='False') OR '$(DesktopFrameworkRelease)'=='True' OR '$(DesktopFrameworkMinorUpdate)'=='True'">True</CalculateDiskSpaceForDesktop>
            <CalculateDiskSpaceForUpdate>False</CalculateDiskSpaceForUpdate>
            <CalculateDiskSpaceForUpdate Condition="(!('$(C2Outlook)'=='False' AND '$(EditSend)'=='False' AND '$(AdminTool)'=='False' AND '$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(WEC)'=='False' AND '$(WorkflowDesigner)'=='False' AND '$(UrlCreator)'=='False' AND '$(LocalDataConnector)'=='False' AND '$(Export)'=='False' AND '$(UserSynchronization)'=='False') AND ('$(CurrentInstallStateUpdate)'=='False')) OR '$(UpdateRelease)'=='True' OR '$(UpdateMinorUpdate)'=='True'">True</CalculateDiskSpaceForUpdate>
            <CalculateDiskSpaceForClientOCR>False</CalculateDiskSpaceForClientOCR>
            <CalculateDiskSpaceForClientOCR Condition="(('$(Import)'=='True' OR '$(Scanner)'=='True' OR '$(SmartConnect)'=='True' OR '$(Printer)'=='True' OR '$(C2Outlook)'=='True') AND '$(CurrentInstallStateClientOCR)'=='False') OR '$(ClientOCRRelease)'=='True' OR '$(ClientOCRMinorUpdate)'=='True'">True</CalculateDiskSpaceForClientOCR>
        </PropertyGroup>
        <RequiredDiskSpaceCalc
          SettingsPath="$(SettingsPath)"
          C2Outlook="$(CalculateDiskSpaceForC2Outlook)"
          EditSend="$(CalculateDiskSpaceForEditSend)"
          AdminTool="$(CalculateDiskSpaceForAdminTool)"
          Scanner="$(CalculateDiskSpaceForScanner)"
          Export="$(CalculateDiskSpaceForExport)"
          Import="$(CalculateDiskSpaceForImport)"
          Printer="$(CalculateDiskSpaceForPrinter)"
          SmartConnect="$(CalculateDiskSpaceForSmartConnect)"
          WEC="$(CalculateDiskSpaceForWEC)"
          WECServer="$(CalculateDiskSpaceForWECServer)"
          WorkflowDesigner="$(CalculateDiskSpaceForWorkflowDesigner)"
          UrlCreator="$(CalculateDiskSpaceForUrlCreator)"
          LocalDataConnector="$(CalculateDiskSpaceForLocalDataConnector)"
          UserSynchronization="$(CalculateDiskSpaceForUserSynchronization)"
          Desktop="$(CalculateDiskSpaceForDesktop)"
          Update="$(CalculateDiskSpaceForUpdate)"
          ClientOCR="$(CalculateDiskSpaceForClientOCR)"
          ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="RequiredDiskSize" PropertyName="RequiredDiskSpace" />
        </RequiredDiskSpaceCalc>
        <DWMessage Text="Your machine does not have the required amount of free disk size on the system drive. You have: $(FreeDiskMemoryMB)MB. Required: $(RequiredDiskSpace)MB" StringId="MSBuildCheckRequiredDiskSpaceTooLow" Param1="$(FreeDiskMemoryMB)" Param2="$(RequiredDiskSpace)" Param3="" Level="Error" Condition="$(FreeDiskMemoryMB) &lt; $(RequiredDiskSpace)"/>
    </Target>

    <Target Name="PrerequisitesReqireInstallCheck">
        <PropertyGroup>
            <NetDesktopRuntimeName>Microsoft.WindowsDesktop.App</NetDesktopRuntimeName>
            <AspNetCoreRuntimeName>Microsoft.AspNetCore.App</AspNetCoreRuntimeName>
            <NETCoreRuntimeName>Microsoft.NETCore.App</NETCoreRuntimeName>
        </PropertyGroup>
        <PrerequisiteInstallState RedistName="VCredist10x86" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="InstallNeeded" PropertyName="VCredist10x86InstallNeeded" />
        </PrerequisiteInstallState>
        <PrerequisiteInstallState RedistName="VCredist10x64" ContinueOnError="ErrorAndContinue" Condition="'$(Is64bitOS)'=='True'">
            <Output TaskParameter="InstallNeeded" PropertyName="VCredist10x64InstallNeeded" />
        </PrerequisiteInstallState>
        <PrerequisiteInstallState RedistName="VCredist14x86" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="InstallNeeded" PropertyName="VCredist14x86InstallNeeded" />
        </PrerequisiteInstallState>
        <NetRuntimeInstaller SourceVersion="$(CurrentWindowsDesktopRuntimex64Ver)" RuntimeName="$(NetDesktopRuntimeName)">
            <Output TaskParameter="IsInstalledVersionHigherOrEqual" PropertyName="IsInstalledVersionHigherOrEqualDownloadWinRuntimex64" />
        </NetRuntimeInstaller>
        <NetRuntimeInstaller SourceVersion="$(CurrentWindowsDesktopRuntimex86Ver)" RuntimeName="$(NetDesktopRuntimeName)" Checkx86Runtime="True">
            <Output TaskParameter="IsInstalledVersionHigherOrEqual" PropertyName="IsInstalledVersionHigherOrEqualDownloadWinRuntimex86" />
        </NetRuntimeInstaller>
        <NetRuntimeInstaller SourceVersion="$(CurrentAspNetCoreRuntimex86Ver)" RuntimeName="$(AspNetCoreRuntimeName)" Checkx86Runtime="True">
            <Output TaskParameter="IsInstalledVersionHigherOrEqual" PropertyName="IsInstalledVersionHigherOrEqualDownloadAspNetCoreRuntimex86" />
        </NetRuntimeInstaller>
        <NetRuntimeInstaller SourceVersion="$(CurrentNETCoreRuntimex86Ver)" RuntimeName="$(NETCoreRuntimeName)" Checkx86Runtime="True">
            <Output TaskParameter="IsInstalledVersionHigherOrEqual" PropertyName="IsInstalledVersionHigherOrEqualDownloadNETCoreRuntimex86" />
        </NetRuntimeInstaller>
        <WebView2RuntimeInstaller SourceVersion="$(CurrentWebView2Runtimex64Ver)">
            <Output TaskParameter="IsInstalledVersionHigherOrEqualx64" PropertyName="IsInstalledVersionHigherOrEqualDownloadWebView2Runtimex64" />
        </WebView2RuntimeInstaller>
        <WebView2RuntimeInstaller SourceVersion="$(CurrentWebView2Runtimex86Ver)">
            <Output TaskParameter="IsInstalledVersionHigherOrEqualx86" PropertyName="IsInstalledVersionHigherOrEqualDownloadWebView2Runtimex86" />
        </WebView2RuntimeInstaller>
        <PropertyGroup>
            <VCredist10x64InstallNeeded Condition="'$(Is64bitOS)'=='False'">False</VCredist10x64InstallNeeded>
        </PropertyGroup>
        <Message Text="VCredist10x86InstallNeeded:$(VCredist10x86InstallNeeded)" />
        <Message Text="VCredist10x64InstallNeeded:$(VCredist10x64InstallNeeded)" />
        <Message Text="VCredist14x86InstallNeeded:$(VCredist14x86InstallNeeded)" />
    </Target>

    <Target Name="UninstallDesktopFramework" Condition="(('$(DesktopFrameworkServerEqualsDownloadedMSI)'=='True') AND ('$(DesktopFrameworkMSIFileVerification)'=='True') AND ('$(DesktopFrameworkMSIFileThumbprintVerification)'=='True') ) OR ('$(DesktopFramework)'=='False')">
        <!-- Start Remove ssl certificate asignment and certificates-->
        <CallTarget Targets="_UninstallAndAssignDesktopSSLCertificate" ContinueOnError="ErrorAndContinue" />
        <!-- End Remove ssl certificate asignment and certificates-->
        <CallTarget Targets="_SetDesktopFrameworkUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_InitRemoveDesktopFramework" ContinueOnError="ErrorAndContinue" Condition="'$(DesktopFrameworkMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetDesktopFrameworkUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveDesktopFramework" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetDesktopFrameworkUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepDesktopFameworkVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryDesktopFramework" ContinueOnError="ErrorAndContinue" Condition="'$(DesktopFramework)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessDesktopFramework" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessDesktopFramework">
        <DWMessage Text="Desktop Framework could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Desktop Framework" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallDesktopFramework)'=='False') AND ('$(DesktopFramework)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetDesktopFrameworkUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallDesktopFramework>False</SuccessfullUninstallDesktopFramework>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryDesktopFramework">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(DesktopFrameWorkMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallDesktopFramework)'!='False'" />
    </Target>
    <Target Name="_KeepDesktopFameworkVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionDesktopFramework)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionDesktopFramework)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledDesktopFrameworkSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(DesktopFrameWorkMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionDesktopFramework)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(DesktopFrameWorkMSIName) /t REG_SZ /d "$(InstalledVersionDesktopFramework)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledDesktopFrameworkSmaller)'=='True'" />
    </Target>
    <Target Name="_UninstallAndAssignDesktopSSLCertificate">
        <SmartExec Command='"$(Netsh)" http delete sslcert ipport=127.0.0.1:8091'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(NetshDeleteSuccessExitCodes)"/>

        <SmartExec Command='"$(Certutil)" -delstore My "EE9426B1C37D0C6A2A273CEB649F46136E9A58B9"'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(CertRemoveExitCodes)" />
        <SmartExec Command='"$(Certutil)" -delstore Root "8B82047AF3B17559957BDF3F937EE519731A1042"'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(CertRemoveExitCodes)" />
        <!-- Cleanup -->
        <SmartExec Command='"$(Certutil)" -delstore My "D58F8D2BE8B42EAAA270E736583C1E240BBABA84"'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(CertRemoveExitCodes)" />
        <SmartExec Command='"$(Certutil)" -delstore Root "39CFB3B732DB2F5D30D4404D088780E21C15274A"'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(CertRemoveExitCodes)" />
        <SmartExec Command='"$(Certutil)" -delstore My "39CFB3B732DB2F5D30D4404D088780E21C15274A"'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(CertRemoveExitCodes)" />
        <SmartExec Command='"$(Certutil)" -delstore Root "D58F8D2BE8B42EAAA270E736583C1E240BBABA84"'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(CertRemoveExitCodes)" />
    </Target>

    <Target Name="UninstallClientOCR" Condition="(('$(ClientOCRServerEqualsDownloadedMSI)'=='True') AND ('$(ClientOCRMSIFileVerification)'=='True')  AND ('$(ClientOCRMSIFileThumbprintVerification)'=='True') ) OR ('$(ClientOCR)'=='False')">
        <CallTarget Targets="_InitRemoveClientOCR" ContinueOnError="ErrorAndContinue" Condition="'$(ClientOCRMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetClientOCRUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveClientOCR" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetClientOCRUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepClientOCRVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryClientOCR" ContinueOnError="ErrorAndContinue" Condition="'$(ClientOCR)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessClientOCR" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessClientOCR">
        <DWMessage Text="Client OCR could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Client OCR" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallClientOCR)'=='False') AND ('$(ClientOCR)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetClientOCRUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallClientOCR>False</SuccessfullUninstallClientOCR>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryClientOCR">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(ClientOCRMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallClientOCR)'!='False'" />
    </Target>
    <Target Name="_KeepClientOCRVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3OCRMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionClientOCR)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionClientOCR)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledClientOCRSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ClientOCRMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionClientOCR)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ClientOCRMSIName) /t REG_SZ /d "$(InstalledVersionClientOCR)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledClientOCRSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallUpdate" Condition="(('$(UpdateServerEqualsDownloadedMSI)'=='True') AND ('$(UpdateMSIFileVerification)'=='True') AND ('$(UpdateMSIFileThumbprintVerification)'=='True') ) OR ('$(Update)'=='False')">
        <CallTarget Targets="_InitRemoveUpdate" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetUpdateUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveUpdate" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetUpdateUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepUpdateVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryUpdate" ContinueOnError="ErrorAndContinue" Condition="'$(Update)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessUpdate" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessUpdate">
        <DWMessage Text="Update could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Update" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallUpdate)'=='False') AND ('$(Update)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetUpdateUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallUpdate>False</SuccessfullUninstallUpdate>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryUpdate">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(UpdateMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallUpdate)'!='False'" />
    </Target>
    <Target Name="_KeepUpdateVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionUpdate)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionUpdate)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledUpdateSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UpdateMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionUpdate)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UpdateMSIName) /t REG_SZ /d "$(InstalledVersionUpdate)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledUpdateSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallC2Outlook" Condition="(('$(C2OutlookServerEqualsDownloadedMSI)'=='True') AND ('$(C2OutlookMSIFileVerification)'=='True') AND ('$(C2OutlookMSIFileThumbprintVerification)'=='True') ) OR('$(C2Outlook)'=='False')">
        <CallTarget Targets="_StopConnectToOutlookUninstall" ContinueOnError="ErrorAndContinue"/>
        <CallTarget Targets="_InitRemoveC2Outlook" ContinueOnError="ErrorAndContinue" Condition="'$(C2OutlookMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetC2OutlookUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveC2Outlook" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetC2OutlookUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepC2OutlookVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryC2Outlook" ContinueOnError="ErrorAndContinue" Condition="'$(C2Outlook)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessC2Outlook" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessC2Outlook">
        <DWMessage Text="Connect to Outlook could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Connect to Outlook" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallC2Outlook)'=='False') AND ('$(C2Outlook)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetC2OutlookUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallC2Outlook>False</SuccessfullUninstallC2Outlook>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryC2Outlook">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(C2OutlookMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallC2Outlook)'!='False'" />
    </Target>
    <Target Name="_KeepC2OutlookVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionC2Outlook)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionC2Outlook)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledC2OutlookSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(C2OutlookMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionC2Outlook)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(C2OutlookMSIName) /t REG_SZ /d "$(InstalledVersionC2Outlook)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledC2OutlookSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallEditSend" Condition="(('$(EditSendServerEqualsDownloadedMSI)'=='True') AND ('$(EditSendMSIFileVerification)'=='True') AND ('$(EditSendMSIFileThumbprintVerification)'=='True') ) OR ('$(EditSend)'=='False')">
        <CallTarget Targets="_InitRemoveEditSend" ContinueOnError="ErrorAndContinue" Condition="'$(EditSendMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetEditSendUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveEditSend" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetEditSendUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepEditSendVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryEditSend" ContinueOnError="ErrorAndContinue" Condition="'$(EditSend)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessEditSend" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessEditSend">
        <DWMessage Text="Edit %26 Send could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Edit %26 Send" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallEditSend)'=='False') AND ('$(EditSend)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetEditSendUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallEditSend>False</SuccessfullUninstallEditSend>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryEditSend">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(EditSendMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallEditSend)'!='False'" />
    </Target>
    <Target Name="_KeepEditSendVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionEditSend)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionEditSend)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledEditSendSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(EditSendMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionEditSend)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(EditSendMSIName) /t REG_SZ /d "$(InstalledVersionEditSend)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledEditSendSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallAdminTool" Condition="(('$(AdminToolServerEqualsDownloadedMSI)'=='True') AND ('$(AdminToolMSIFileVerification)'=='True') AND ('$(AdminToolMSIFileThumbprintVerification)'=='True') ) OR ('$(AdminTool)'=='False')">
        <CallTarget Targets="_InitRemoveAdminTool" ContinueOnError="ErrorAndContinue" Condition="'$(AdminToolMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetAdminToolUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveAdminTool" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetAdminToolUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepAdminToolVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryAdminTool" ContinueOnError="ErrorAndContinue" Condition="'$(AdminTool)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessAdministration" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessAdministration">
        <DWMessage Text="Administration could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Administration" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallAdminTool)'=='False') AND ('$(AdminTool)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetAdminToolUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallAdminTool>False</SuccessfullUninstallAdminTool>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryAdminTool">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(AdminToolMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallAdminTool)'!='False'" />
    </Target>
    <Target Name="_KeepAdminToolVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionAdminTool)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionAdminTool)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledAdminToolSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(AdminToolMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionAdminTool)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(AdminToolMSIName) /t REG_SZ /d "$(InstalledVersionAdminTool)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledAdminToolSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallScanner" Condition="(('$(ScannerServerEqualsDownloadedMSI)'=='True') AND ('$(ScannerMSIFileVerification)'=='True') AND ('$(ScannerMSIFileThumbprintVerification)'=='True') ) OR ('$(Scanner)'=='False')">
        <CallTarget Targets="_InitRemoveScanner" ContinueOnError="ErrorAndContinue" Condition="'$(ScannerMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetScannerUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveScanner" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetScannerUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepScannerVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryScanner" ContinueOnError="ErrorAndContinue" Condition="'$(Scanner)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessScanner" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessScanner">
        <DWMessage Text="Scan could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Scan" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallScanner)'=='False') AND ('$(Scanner)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetScannerUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallScanner>False</SuccessfullUninstallScanner>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryScanner">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(ScannerMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallScanner)'!='False'" />
    </Target>
    <Target Name="_KeepScannerVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionScanner)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionScanner)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledScannerSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ScannerMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionScanner)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ScannerMSIName) /t REG_SZ /d "$(InstalledVersionScanner)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledScannerSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallExport" Condition="(('$(ExportServerEqualsDownloadedMSI)'=='True') AND ('$(ExportMSIFileVerification)'=='True') AND ('$(ExportMSIFileThumbprintVerification)'=='True') ) OR ('$(Export)'=='False')">
        <CallTarget Targets="_InitRemoveExport" ContinueOnError="ErrorAndContinue" Condition="'$(ExportMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetExportUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveExport" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetExportUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepExportVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryExport" ContinueOnError="ErrorAndContinue" Condition="'$(Export)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessExport" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessExport">
        <DWMessage Text="Local Data Connector could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Export" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallExport)'=='False') AND ('$(Export)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetExportUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallExport>False</SuccessfullUninstallExport>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryExport">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(ExportMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallExport)'!='False'" />
    </Target>
    <Target Name="_KeepExportVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionExport)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionExport)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledExportSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ExportMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionExport)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ExportMSIName) /t REG_SZ /d "$(InstalledVersionExport)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledExportSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallImport" Condition="(('$(ImportServerEqualsDownloadedMSI)'=='True') AND ('$(ImportMSIFileVerification)'=='True') AND ('$(ImportMSIFileThumbprintVerification)'=='True') ) OR ('$(Import)'=='False')">
        <CallTarget Targets="_InitRemoveImport" ContinueOnError="ErrorAndContinue" Condition="'$(ImportMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetImportUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveImport" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetImportUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepImportVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryImport" ContinueOnError="ErrorAndContinue" Condition="'$(Import)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessImport" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessImport">
        <DWMessage Text="Import could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Import" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallImport)'=='False') AND ('$(Import)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetImportUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallImport>False</SuccessfullUninstallImport>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryImport">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(ImportMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallImport)'!='False'" />
    </Target>
    <Target Name="_KeepImportVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionImport)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionImport)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledImportSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ImportMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionImport)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(ImportMSIName) /t REG_SZ /d "$(InstalledVersionImport)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledImportSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallPrinter" Condition="(('$(PrinterServerEqualsDownloadedMSI)'=='True') AND ('$(PrinterMSIFileVerification)'=='True') AND ('$(PrinterMSIFileThumbprintVerification)'=='True') ) OR ('$(Printer)'=='False')">
        <CallTarget Targets="_InitRemovePrinter" ContinueOnError="ErrorAndContinue" Condition="'$(PrinterMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetPrinterUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemovePrinter" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetPrinterUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepPrinterVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryPrinter" ContinueOnError="ErrorAndContinue" Condition="'$(Printer)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessPrinter" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessPrinter">
        <DWMessage Text="Printer could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Printer" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallPrinter)'=='False') AND ('$(Printer)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetPrinterUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallPrinter>False</SuccessfullUninstallPrinter>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryPrinter">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(PrinterMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallPrinter)'!='False'" />
    </Target>
    <Target Name="_KeepPrinterVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionPrinter)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionPrinter)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledPrinterSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(PrinterMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionPrinter)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(PrinterMSIName) /t REG_SZ /d "$(InstalledVersionPrinter)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledPrinterSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallSmartConnect" Condition="(('$(SmartConnectServerEqualsDownloadedMSI)'=='True') AND ('$(SmartConnectMSIFileVerification)'=='True') AND ('$(SmartConnectMSIFileThumbprintVerification)'=='True') ) OR ('$(SmartConnect)'=='False')">
        <CallTarget Targets="_InitRemoveSmartConnect" ContinueOnError="ErrorAndContinue" Condition="'$(SmartConnectMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetSmartConnectUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveSmartConnect" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetSmartConnectUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepSmartConnectVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistrySmartConnect" ContinueOnError="ErrorAndContinue" Condition="'$(SmartConnect)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessSmartConnect" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessSmartConnect">
        <DWMessage Text="Smart Connect could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Smart Connect" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallSmartConnect)'=='False') AND ('$(SmartConnect)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetSmartConnectUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallSmartConnect>False</SuccessfullUninstallSmartConnect>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistrySmartConnect">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(SmartConnectMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallSmartConnect)'!='False'" />
    </Target>
    <Target Name="_KeepSmartConnectVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionSmartConnect)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionSmartConnect)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledSmartConnectSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(SmartConnectMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionSmartConnect)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(SmartConnectMSIName) /t REG_SZ /d "$(InstalledVersionSmartConnect)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledSmartConnectSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallWEC" Condition="(('$(WECServerEqualsDownloadedMSI)'=='True') AND ('$(WECMSIFileVerification)'=='True') AND ('$(WECMSIFileThumbprintVerification)'=='True') ) OR ('$(WEC)'=='False')">
        <CallTarget Targets="_InitRemoveWEC" ContinueOnError="ErrorAndContinue" Condition="'$(WECMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetWECUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveWEC" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetWECUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepWECVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryWEC" ContinueOnError="ErrorAndContinue" Condition="'$(WEC)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessWEC" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessWEC">
        <DWMessage Text="Windows Explorer Client could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Windows Explorer Client" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallWEC)'=='False') AND ('$(WEC)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetWECUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallWEC>False</SuccessfullUninstallWEC>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryWEC">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(WECMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallWEC)'!='False'" />
    </Target>
    <Target Name="_KeepWECVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionWEC)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionWEC)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledWECSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WECMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionWEC)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WECMSIName) /t REG_SZ /d "$(InstalledVersionWEC)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledWECSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallWECServer" Condition="(('$(WECServerServerEqualsDownloadedMSI)'=='True') AND ('$(WECServerMSIFileVerification)'=='True') AND ('$(WECServerMSIFileThumbprintVerification)'=='True') ) OR ('$(WECServer)'=='False')">
        <CallTarget Targets="_InitRemoveWECServer" ContinueOnError="ErrorAndContinue" Condition="'$(WECServerMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetWECServerUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveWECServer" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetWECServerUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepWECServerVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryWECServer" ContinueOnError="ErrorAndContinue" Condition="'$(WECServer)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessWECServer" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessWECServer">
        <DWMessage Text="Windows Explorer Client Server could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Windows Explorer Client Server" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallWECServer)'=='False') AND ('$(WECServer)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetWECServerUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallWECServer>False</SuccessfullUninstallWECServer>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryWECServer">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(WECServerMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallWECServer)'!='False'" />
    </Target>
    <Target Name="_KeepWECServerVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionWECServer)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionWECServer)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledWECServerSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WECServerMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionWECServer)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WECServerMSIName) /t REG_SZ /d "$(InstalledVersionWECServer)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledWECServerSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallWorkflowDesigner" Condition="(('$(WorkflowDesignerServerEqualsDownloadedMSI)'=='True') AND ('$(WorkflowDesignerMSIFileVerification)'=='True') AND ('$(WorkflowDesignerMSIFileThumbprintVerification)'=='True') ) OR ('$(WorkflowDesigner)'=='False')">
        <CallTarget Targets="_InitRemoveWorkflowDesigner" ContinueOnError="ErrorAndContinue" Condition="'$(WorkflowDesignerMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetWorkflowDesignerUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveWorkflowDesigner" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetWorkflowDesignerUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepWorkflowDesignerVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryWorkflowDesigner" ContinueOnError="ErrorAndContinue" Condition="'$(WorkflowDesigner)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessWorkflowDesigner" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessWorkflowDesigner">
        <DWMessage Text="Workflow Designer could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Workflow Designer" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallWorkflowDesigner)'=='False') AND ('$(WorkflowDesigner)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetWorkflowDesignerUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallWorkflowDesigner>False</SuccessfullUninstallWorkflowDesigner>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryWorkflowDesigner">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(WorkflowDesignerMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallWorkflowDesigner)'!='False'" />
    </Target>
    <Target Name="_KeepWorkflowDesignerVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionWorkflowDesigner)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionWorkflowDesigner)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledWorkflowDesignerSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WorkflowDesignerMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionWorkflowDesigner)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(WorkflowDesignerMSIName) /t REG_SZ /d "$(InstalledVersionWorkflowDesigner)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledWorkflowDesignerSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallUrlCreator" Condition="(('$(UrlCreatorServerEqualsDownloadedMSI)'=='True') AND ('$(UrlCreatorMSIFileVerification)'=='True') AND ('$(UrlCreatorMSIFileThumbprintVerification)'=='True') ) OR ('$(UrlCreator)'=='False')">
        <CallTarget Targets="_InitRemoveUrlCreator" ContinueOnError="ErrorAndContinue" Condition="'$(UrlCreatorMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetUrlCreatorUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveUrlCreator" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetUrlCreatorUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepUrlCreatorVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryUrlCreator" ContinueOnError="ErrorAndContinue" Condition="'$(UrlCreator)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessURLCreator" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessURLCreator">
        <DWMessage Text="URL Creator could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="URL Creator" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallUrlCreator)'=='False') AND ('$(UrlCreator)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetUrlCreatorUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallUrlCreator>False</SuccessfullUninstallUrlCreator>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryUrlCreator">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(UrlCreatorMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallUrlCreator)'!='False'" />
    </Target>
    <Target Name="_KeepUrlCreatorVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionUrlCreator)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionUrlCreator)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledUrlCreatorSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UrlCreatorMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionUrlCreator)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UrlCreatorMSIName) /t REG_SZ /d "$(InstalledVersionUrlCreator)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledUrlCreatorSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallLocalDataConnector" Condition="(('$(LocalDataConnectorServerEqualsDownloadedMSI)'=='True') AND ('$(LocalDataConnectorMSIFileVerification)'=='True') AND ('$(LocalDataConnectorMSIFileThumbprintVerification)'=='True') ) OR ('$(LocalDataConnector)'=='False')">
        <CallTarget Targets="_InitRemoveLocalDataConnector" ContinueOnError="ErrorAndContinue" Condition="'$(LocalDataConnectorMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetLocalDataConnectorUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveLocalDataConnector" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetLocalDataConnectorUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepLocalDataConnectorVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryLocalDataConnector" ContinueOnError="ErrorAndContinue" Condition="'$(LocalDataConnector)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessLocalDataConnector" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessLocalDataConnector">
        <DWMessage Text="Local Data Connector could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="Local Data Connector" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallLocalDataConnector)'=='False') AND ('$(LocalDataConnector)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetLocalDataConnectorUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallLocalDataConnector>False</SuccessfullUninstallLocalDataConnector>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryLocalDataConnector">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(LocalDataConnectorMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallLocalDataConnector)'!='False'" />
    </Target>
    <Target Name="_KeepLocalDataConnectorVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionLocalDataConnector)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionLocalDataConnector)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledLocalDataConnectorSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(LocalDataConnectorMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionLocalDataConnector)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(LocalDataConnectorMSIName) /t REG_SZ /d "$(InstalledVersionLocalDataConnector)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledLocalDataConnectorSmaller)'=='True'" />
    </Target>

    <Target Name="UninstallUserSynchronization" Condition="(('$(UserSynchronizationServerEqualsDownloadedMSI)'=='True') AND ('$(UserSynchronizationMSIFileVerification)'=='True') AND ('$(UserSynchronizationMSIFileThumbprintVerification)'=='True') ) OR ('$(UserSynchronization)'=='False')">
        <CallTarget Targets="_InitRemoveUserSynchronization" ContinueOnError="ErrorAndContinue" Condition="'$(UserSynchronizationMinorUpdate)'!='True'" />
        <CallTarget Targets="_SetUserSynchronizationUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_DeployRemoveUserSynchronization" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetUserSynchronizationUninstallSuccess" ContinueOnError="ErrorAndContinue" Condition="'$(MSBuildLastTaskResult)'=='false'" />
        <CallTarget Targets="_KeepUserSynchronizationVersionInRegistry" ContinueOnError="ErrorAndContinue" Condition="'$(UpdateMode)'=='True'" />
        <CallTarget Targets="_RemoveRegistryUserSynchronization" ContinueOnError="ErrorAndContinue" Condition="'$(UserSynchronization)'=='False' AND '$(UpdateMode)'!='True'" />
        <CallTarget Targets="_DisplayUninstallSuccessUserSynchronization" ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="_DisplayUninstallSuccessUserSynchronization">
        <DWMessage Text="User Synchronization could not be uninstalled due to an error. Please retry to uninstall the module." StringId="ModuleFailedToUninstall" Param1="User Synchronization" Param2="" Param3="" Level="Error" Condition="('$(SuccessfullUninstallUserSynchronization)'=='False') AND ('$(UserSynchronization)'=='False' AND '$(UpdateMode)'!='True')"/>
    </Target>
    <Target Name="_SetUserSynchronizationUninstallSuccess">
        <PropertyGroup>
            <SuccessfullUninstallUserSynchronization>False</SuccessfullUninstallUserSynchronization>
        </PropertyGroup>
    </Target>
    <Target Name="_RemoveRegistryUserSynchronization">
        <!-- Remove Msi Version from Registry -->
        <SmartExec Command='"$(Reg)" delete HKLM\SOFTWARE\DocuWare\Setup /v $(UserSynchronizationMSIName) /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   SuccessExitCodes="$(RegDeleteSuccessExitCodes)"
                   Condition="'$(SuccessfullUninstallUserSynchronization)'!='False'" />
    </Target>
    <Target Name="_KeepUserSynchronizationVersionInRegistry">
        <VersionCompare FirstVersion="$(InitialV3ClientSetupMSIVersion)" Operator="Smaller" SecondVersion="$(InstalledVersionUserSynchronization)" ContinueOnError="ErrorAndContinue" Condition="'$(InstalledVersionUserSynchronization)'!=''">
            <Output TaskParameter="CompareResult" PropertyName="InstalledUserSynchronizationSmaller" />
        </VersionCompare>
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UserSynchronizationMSIName) /t REG_SZ /d "$(RegistryVersionForDocuWareVersionWithoutRegistryVersion)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledVersionUserSynchronization)'==''" />
        <SmartExec Command='"$(Reg)" add HKLM\SOFTWARE\DocuWare\Setup /v $(UserSynchronizationMSIName) /t REG_SZ /d "$(InstalledVersionUserSynchronization)" /f /reg:32'
                   ContinueOnError="ErrorAndContinue"
                   Condition="'$(InstalledUserSynchronizationSmaller)'=='True'" />
    </Target>

    <Target Name="_DetectUpdateMode">
        <CheckForUpdateMode MsiUrl="$(C2OutlookMsiUrl)" ModuleName="$(C2OutlookMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="C2OutlookRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="C2OutlookMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(AdminToolMsiUrl)" ModuleName="$(AdminToolMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="AdminToolRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="AdminToolMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(ScannerMsiUrl)" ModuleName="$(ScannerMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="ScannerRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="ScannerMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(ExportMsiUrl)" ModuleName="$(ExportMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="ExportRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="ExportMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(ImportMsiUrl)" ModuleName="$(ImportMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="ImportRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="ImportMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(EditSendMsiUrl)" ModuleName="$(EditSendMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="EditSendRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="EditSendMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(PrinterMsiUrl)" ModuleName="$(PrinterMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="PrinterRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="PrinterMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(SmartConnectMsiUrl)" ModuleName="$(SmartConnectMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="SmartConnectRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="SmartConnectMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(WECMsiUrl)" ModuleName="$(WECMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="WECRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="WECMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(WECServerMsiUrl)" ModuleName="$(WECServerMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="WECServerRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="WECServerMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(WorkflowDesignerMsiUrl)" ModuleName="$(WorkflowDesignerMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="WorkflowDesignerRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="WorkflowDesignerMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(UrlCreatorMsiUrl)" ModuleName="$(UrlCreatorMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="UrlCreatorRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="UrlCreatorMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(UserSynchronizationMsiUrl)" ModuleName="$(UserSynchronizationMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="UserSynchronizationRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="UserSynchronizationMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(LocalDataConnectorMsiUrl)" ModuleName="$(LocalDataConnectorMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="LocalDataConnectorRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="LocalDataConnectorMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(ClientOcrMsiUrl)" ModuleName="$(ClientOCRMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="ClientOCRRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="ClientOCRMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(DesktopMsiUrl)" ModuleName="$(DesktopFrameWorkMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="DesktopFrameworkRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="DesktopFrameworkMinorUpdate" />
        </CheckForUpdateMode>
        <CheckForUpdateMode MsiUrl="$(UpdateMsiUrl)" ModuleName="$(UpdateMSIName)" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="ReleaseUpdate" PropertyName="UpdateRelease" />
            <Output TaskParameter="MinorUpdate" PropertyName="UpdateMinorUpdate" />
        </CheckForUpdateMode>
    </Target>

    <Target Name="CreateUpdateTodoList"  DependsOnTargets="_DetectUpdateMode">
        <!-- Handle Update of 6.5 and before versions -->
        <PropertyGroup>
            <ClientOCRRelease Condition="'$(CurrentInstallStateRetiredCommonOCR)'=='True'">True</ClientOCRRelease>
            <DesktopFrameworkRelease Condition="'$(CurrentInstallStateRetiredDesktop)'=='True'">True</DesktopFrameworkRelease>
            <ClientOCRRelease Condition="'$(CurrentInstallStateRetiredDesktop)'=='True'">True</ClientOCRRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredDesktop)'=='True') AND ('$(BundleUpdate)'=='True')">True</UpdateRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredDesktop)'=='True') AND ('$(BundleUpdate)'=='False')">False</UpdateRelease>
            <EditSendRelease Condition="'$(CurrentInstallStateRetiredDesktop)'=='True'">True</EditSendRelease>
            <ImportRelease Condition="'$(CurrentInstallStateRetiredDesktop)'=='True'">True</ImportRelease>
            <PrinterRelease Condition="'$(CurrentInstallStateRetiredDesktop)'=='True'">True</PrinterRelease>
            <ScannerRelease Condition="'$(CurrentInstallStateRetiredDesktop)'=='True'">True</ScannerRelease>
            <SmartConnectRelease Condition="'$(CurrentInstallStateRetiredDesktop)'=='True'">True</SmartConnectRelease>
            <AdminToolRelease Condition="'$(CurrentInstallStateRetiredAdminTool)'=='True'">True</AdminToolRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredAdminTool)'=='True') AND ('$(BundleUpdate)'=='True')">True</UpdateRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredAdminTool)'=='True') AND ('$(BundleUpdate)'=='False')">False</UpdateRelease>
            <DesktopFrameworkRelease Condition="'$(CurrentInstallStateRetiredAdminTool)'=='True'">True</DesktopFrameworkRelease>
            <C2OutlookRelease Condition="'$(CurrentInstallStateRetiredC2Outlook)'=='True'">True</C2OutlookRelease>
            <C2OutlookRelease Condition="'$(CurrentInstallStateRetiredC2Outlook)'=='True'">True</C2OutlookRelease>
            <DesktopFrameworkRelease Condition="'$(CurrentInstallStateRetiredC2Outlook)'=='True'">True</DesktopFrameworkRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredUpdate)'=='True') AND ('$(BundleUpdate)'=='True')">True</UpdateRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredUpdate)'=='True') AND ('$(BundleUpdate)'=='False')">False</UpdateRelease>
            <WECRelease Condition="'$(CurrentInstallStateRetiredWEC)'=='True'">True</WECRelease>
            <WECServerRelease Condition="'$(CurrentInstallStateRetiredWEC)'=='True'">True</WECServerRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredWEC)'=='True') AND ('$(BundleUpdate)'=='True')">True</UpdateRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredWEC)'=='True') AND ('$(BundleUpdate)'=='False')">False</UpdateRelease>
            <DesktopFrameworkRelease Condition="'$(CurrentInstallStateRetiredWEC)'=='True'">True</DesktopFrameworkRelease>
            <WorkflowDesignerRelease Condition="'$(CurrentInstallStateRetiredWorkflowDesigner )'=='True'">True</WorkflowDesignerRelease>
            <DeskflowDesignerRelease Condition="'$(CurrentInstallStateRetiredWorkflowDesigner )'=='True'">True</DeskflowDesignerRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredWorkflowDesigner )'=='True') AND ('$(BundleUpdate)'=='True')">True</UpdateRelease>
            <UpdateRelease Condition="('$(CurrentInstallStateRetiredWorkflowDesigner )'=='True') AND ('$(BundleUpdate)'=='False')">False</UpdateRelease>
        </PropertyGroup>

        <PropertyGroup>
            <C2Outlook Condition="('$(CurrentInstallStateRetiredC2Outlook)'=='True' OR '$(CurrentInstallStateC2Outlook)'=='True')">True</C2Outlook>
            <EditSend Condition="('$(CurrentInstallStateRetiredDesktop)'=='True' OR '$(CurrentInstallStateEditSend)'=='True')">True</EditSend>
            <AdminTool Condition="('$(CurrentInstallStateRetiredAdminTool)'=='True' OR '$(CurrentInstallStateAdminTool)'=='True')">True</AdminTool>
            <Scanner Condition="('$(CurrentInstallStateRetiredDesktop)'=='True' OR '$(CurrentInstallStateScanner)'=='True')">True</Scanner>
            <Export Condition="('$(CurrentInstallStateRetiredExport)'=='True' OR '$(CurrentInstallStateExport)'=='True')">True</Export>
            <Import Condition="('$(CurrentInstallStateRetiredDesktop)'=='True' OR '$(CurrentInstallStateImport)'=='True')">True</Import>
            <Printer Condition="('$(CurrentInstallStateRetiredDesktop)'=='True' OR '$(CurrentInstallStatePrinter)'=='True')">True</Printer>
            <SmartConnect Condition="('$(CurrentInstallStateRetiredDesktop)'=='True' OR '$(CurrentInstallStateSmartConnect)'=='True')">True</SmartConnect>
            <WEC Condition="('$(CurrentInstallStateRetiredWEC)'=='True' OR '$(CurrentInstallStateWEC)'=='True')">True</WEC>
            <WECServer Condition="('$(CurrentInstallStateRetiredWEC)'=='True' OR '$(CurrentInstallStateWEC)'=='True') OR ('$(CurrentInstallStateRetiredWECServer)'=='True' OR '$(CurrentInstallStateWECServer)'=='True')">True</WECServer>
            <WorkflowDesigner Condition="('$(CurrentInstallStateRetiredWorkflowDesigner)'=='True' OR '$(CurrentInstallStateWorkflowDesigner)'=='True')">True</WorkflowDesigner>
            <UrlCreator Condition="('$(CurrentInstallStateRetiredUrlCreator)'=='True' OR '$(CurrentInstallStateUrlCreator)'=='True')">True</UrlCreator>
            <LocalDataConnector Condition="('$(CurrentInstallStateRetiredLocalDataConnector)'=='True' OR '$(CurrentInstallStateLocalDataConnector)'=='True')">True</LocalDataConnector>
            <UserSynchronization Condition="('$(CurrentInstallStateRetiredUserSynchronization)'=='True' OR '$(CurrentInstallStateUserSynchronization)'=='True')">True</UserSynchronization>
            <DesktopFramework Condition="(('$(C2Outlook)'=='False' AND '$(EditSend)'=='False' AND '$(AdminTool)'=='False' AND '$(Export)'=='False' AND '$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(WEC)'=='False' AND '$(WorkflowDesigner)'=='False') AND ('$(CurrentInstallStateDesktopFramework)'=='True') AND '$(UpdateMode)'!='True')">False</DesktopFramework>
            <DesktopFramework Condition="!((('$(C2Outlook)'=='False' AND '$(EditSend)'=='False' AND '$(AdminTool)'=='False' AND '$(Export)'=='False' AND '$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(WEC)'=='False' AND '$(WorkflowDesigner)'=='False') AND ('$(CurrentInstallStateDesktopFramework)'=='True') AND '$(UpdateMode)'!='True'))">True</DesktopFramework>
            <ClientOCR Condition="(('$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(C2Outlook)'=='False') AND ('$(CurrentInstallStateClientOCR)'=='True') AND '$(UpdateMode)'!='True')">False</ClientOCR>
            <ClientOCR Condition="!((('$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(C2Outlook)'=='False') AND ('$(CurrentInstallStateClientOCR)'=='True') AND '$(UpdateMode)'!='True'))">True</ClientOCR>
        </PropertyGroup>

        <CallTarget Targets="_BundleModulesToUpdate" Condition="'$(BundleUpdate)'=='True'" ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_NoBundleModulesToUpdate" Condition="'$(BundleUpdate)'=='False'" ContinueOnError="ErrorAndContinue" />

        <ItemGroup>
            <UpdateParameters Include="C2OutlookRelease=$(C2OutlookRelease)" />
            <UpdateParameters Include="C2OutlookMinorUpdate=$(C2OutlookMinorUpdate)" />
            <UpdateParameters Include="AdminToolRelease=$(AdminToolRelease)" />
            <UpdateParameters Include="AdminToolMinorUpdate=$(AdminToolMinorUpdate)" />
            <UpdateParameters Include="ScannerRelease=$(ScannerRelease)" />
            <UpdateParameters Include="ScannerMinorUpdate=$(ScannerMinorUpdate)" />
            <UpdateParameters Include="ExportRelease=$(ExportRelease)" />
            <UpdateParameters Include="ExportMinorUpdate=$(ExportMinorUpdate)" />
            <UpdateParameters Include="ImportRelease=$(ImportRelease)" />
            <UpdateParameters Include="ImportMinorUpdate=$(ImportMinorUpdate)" />
            <UpdateParameters Include="EditSendRelease=$(EditSendRelease)" />
            <UpdateParameters Include="EditSendMinorUpdate=$(EditSendMinorUpdate)" />
            <UpdateParameters Include="PrinterRelease=$(PrinterRelease)" />
            <UpdateParameters Include="PrinterMinorUpdate=$(PrinterMinorUpdate)" />
            <UpdateParameters Include="SmartConnectRelease=$(SmartConnectRelease)" />
            <UpdateParameters Include="SmartConnectMinorUpdate=$(SmartConnectMinorUpdate)" />
            <UpdateParameters Include="WECRelease=$(WECRelease)" />
            <UpdateParameters Include="WECMinorUpdate=$(WECMinorUpdate)" />
            <UpdateParameters Include="WECServerRelease=$(WECServerRelease)" />
            <UpdateParameters Include="WECServerMinorUpdate=$(WECServerMinorUpdate)" />
            <UpdateParameters Include="WorkflowDesignerRelease=$(WorkflowDesignerRelease)" />
            <UpdateParameters Include="WorkflowDesignerMinorUpdate=$(WorkflowDesignerMinorUpdate)" />
            <UpdateParameters Include="UrlCreatorRelease=$(UrlCreatorRelease)" />
            <UpdateParameters Include="UrlCreatorMinorUpdate=$(UrlCreatorMinorUpdate)" />
            <UpdateParameters Include="UserSynchronizationRelease=$(UserSynchronizationRelease)" />
            <UpdateParameters Include="UserSynchronizationMinorUpdate=$(UserSynchronizationMinorUpdate)" />
            <UpdateParameters Include="LocalDataConnectorRelease=$(LocalDataConnectorRelease)" />
            <UpdateParameters Include="LocalDataConnectorMinorUpdate=$(LocalDataConnectorMinorUpdate)" />
            <UpdateParameters Include="ClientOCRRelease=$(ClientOCRRelease)" />
            <UpdateParameters Include="ClientOCRMinorUpdate=$(ClientOCRMinorUpdate)" />
            <UpdateParameters Include="DesktopFrameworkRelease=$(DesktopFrameworkRelease)" />
            <UpdateParameters Include="DesktopFrameworkMinorUpdate=$(DesktopFrameworkMinorUpdate)" />
            <UpdateParameters Include="UpdateRelease=$(UpdateRelease)" />
            <UpdateParameters Include="UpdateMinorUpdate=$(UpdateMinorUpdate)" />
        </ItemGroup>
        <Message Text="UpdateParameter: %(UpdateParameters.Identity)" />
    </Target>

    <Target Name="_BundleModulesToUpdate">
        <PropertyGroup>
            <Update Condition="(('$(C2Outlook)'=='False' AND '$(EditSend)'=='False' AND '$(AdminTool)'=='False' AND '$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(WEC)'=='False' AND '$(WorkflowDesigner)'=='False' AND '$(UrlCreator)'=='False' AND '$(LocalDataConnector)'=='False' AND '$(Export)'=='False' AND '$(UserSynchronization)'=='False') AND ('$(CurrentInstallStateUpdate)'=='True') AND '$(UpdateMode)'!='True')">False</Update>
            <Update Condition="!((('$(C2Outlook)'=='False' AND '$(EditSend)'=='False' AND '$(AdminTool)'=='False' AND '$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(WEC)'=='False' AND '$(WorkflowDesigner)'=='False' AND '$(UrlCreator)'=='False' AND '$(LocalDataConnector)'=='False' AND '$(Export)'=='False' AND '$(UserSynchronization)'=='False') AND ('$(CurrentInstallStateUpdate)'=='True') AND '$(UpdateMode)'!='True'))">True</Update>
            <Update Condition="('$(C2OutlookRelease)'=='True' OR '$(C2OutlookMinorUpdate)'=='True' OR '$(AdminToolRelease)'=='True' OR '$(AdminToolMinorUpdate)'=='True' OR '$(ScannerRelease)'=='True' OR '$(ScannerMinorUpdate)'=='True' OR '$(ExportRelease)'=='True' OR '$(ExportMinorUpdate)'=='True' OR '$(ImportRelease)'=='True' OR '$(ImportMinorUpdate)'=='True' OR '$(EditSendRelease)'=='True' OR 'EditSendMinorUpdate=$(EditSendMinorUpdate)'=='True' OR '$(PrinterRelease)'=='True' OR '$(PrinterMinorUpdate)'=='True' OR '$(SmartConnectRelease)'=='True' OR '$(SmartConnectMinorUpdate)'=='True' OR '$(WECRelease)'=='True' OR '$(WECMinorUpdate)'=='True' OR '$(WECServerRelease)'=='True' OR '$(WECServerMinorUpdate)'=='True' OR '$(WorkflowDesignerRelease)'=='True' OR '$(WorkflowDesignerMinorUpdate)'=='True' OR '$(UrlCreatorRelease)'=='True' OR '$(UrlCreatorMinorUpdate)'=='True' OR '$(UserSynchronizationRelease)'=='True' OR '$(UserSynchronizationMinorUpdate)'=='True' OR '$(LocalDataConnectorRelease)'=='True' OR '$(LocalDataConnectorMinorUpdate)'=='True' OR '$(ClientOCRRelease)'=='True' OR '$(ClientOCRMinorUpdate)'=='True' OR '$(DesktopFrameworkRelease)'=='True' OR '$(DesktopFrameworkMinorUpdate)'=='True' OR '$(UpdateRelease)'=='True' OR '$(UpdateMinorUpdate)'=='True')">True</Update>
        </PropertyGroup>
    </Target>

    <Target Name="_NoBundleModulesToUpdate">
        <PropertyGroup>
            <Update Condition="('$(CurrentInstallStateRetiredUpdate)'=='True' OR '$(CurrentInstallStateUpdate)'=='True')">True</Update>
        </PropertyGroup>
    </Target>

    <Target Name="_CorrectInstallStateForFailedInstall">
        <PropertyGroup>
            <CurrentInstallStateDesktopFramework Condition="'$(InstalledVersionDesktopFramework)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateDesktopFramework>
            <CurrentInstallStateClientOCR Condition="'$(InstalledVersionClientOCR)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateClientOCR>
            <CurrentInstallStateUpdate Condition="'$(InstalledVersionUpdate)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateUpdate>
            <CurrentInstallStateC2Outlook Condition="'$(InstalledVersionC2Outlook)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateC2Outlook>
            <CurrentInstallStateEditSend Condition="'$(InstalledVersionEditSend)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateEditSend>
            <CurrentInstallStateAdminTool Condition="'$(InstalledVersionAdminTool)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateAdminTool>
            <CurrentInstallStateScanner Condition="'$(InstalledVersionScanner)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateScanner>
            <CurrentInstallStateExport Condition="'$(InstalledVersionExport)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateExport>
            <CurrentInstallStateImport Condition="'$(InstalledVersionImport)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateImport>
            <CurrentInstallStatePrinter Condition="'$(InstalledVersionPrinter)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStatePrinter>
            <CurrentInstallStateSmartConnect Condition="'$(InstalledVersionSmartConnect)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateSmartConnect>
            <CurrentInstallStateWEC Condition="'$(InstalledVersionWEC)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateWEC>
            <CurrentInstallStateWECServer Condition="'$(InstalledVersionWECServer)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateWECServer>
            <CurrentInstallStateWorkflowDesigner Condition="'$(InstalledVersionWorkflowDesigner)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateWorkflowDesigner>
            <CurrentInstallStateUrlCreator Condition="'$(InstalledVersionUrlCreator)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateUrlCreator>
            <CurrentInstallStateUserSynchronization Condition="'$(InstalledVersionUserSynchronization)'=='$(RegistryVersionForFailedInstall)'">False</CurrentInstallStateUserSynchronization>
        </PropertyGroup>
    </Target>

    <Target Name="Phase_SystemPrepare">
        <CallTarget Targets="_SetSettingsPath"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="PrerequisitesReqireInstallCheck"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="CleanSystem"
                    Condition="'$(CurrentInstallStateRetiredC2Toshiba)'=='True' OR '$(CurrentInstallStateRetiredUploadService)'=='True' OR '$(CurrentInstallStateRetiredIndexCleaner)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="_BackupConfigurationFiles">
        <PropertyGroup>
            <ConfigBackupTimeStampedFolder>$(AllUsersProfile)\DocuWare\ClientConfigBackup\$([System.DateTime]::Now.ToString(`yyyy-MM-dd_HH.mm.ss`))</ConfigBackupTimeStampedFolder>
        </PropertyGroup>
        <Message Text="MKDir $(ConfigBackupTimeStampedFolder)" Importance="high"/>
        <MakeDir Directories="$(ConfigBackupTimeStampedFolder)" Condition="!Exists('$(ConfigBackupTimeStampedFolder)')" />
        <Message Text="Backing up current configuration files to $(ConfigBackupTimeStampedFolder)" Importance="high"/>
        <ItemGroup>
            <ConfigFiles Include="$(CommonProgramFiles)\DocuWare\**\*.config" Condition="Exists('$(CommonProgramFiles)\DocuWare')"/>
            <ConfigFiles Include="$(CommonProgramFiles)\DocuWare\**\*.settings" Condition="Exists('$(CommonProgramFiles)\DocuWare')"/>
            <ConfigFiles Include="$(ClientSetupBaseDir)\**\*.config" Condition="Exists('$(ClientSetupBaseDir)')"/>
            <ConfigFiles Include="$(ClientSetupBaseDir)\**\*.settings" Condition="Exists('$(ClientSetupBaseDir)')"/>
            <ConfigFiles Include="$(ClientSetupBaseDir64)\**\*.config" Condition="Exists('$(ClientSetupBaseDir64)')"/>
            <ConfigFiles Include="$(ClientSetupBaseDir64)\**\*.settings" Condition="Exists('$(ClientSetupBaseDir64)')"/>
        </ItemGroup>
        <Copy SourceFiles="@(ConfigFiles)"
              DestinationFolder="$(ConfigBackupTimeStampedFolder)\%(RecursiveDir)"
              Retries="5" ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="_SetUpdateMode">
        <PropertyGroup>
            <UpdateMode>True</UpdateMode>
        </PropertyGroup>
    </Target>

    <Target Name="Phase_UpdatePrepare" DependsOnTargets="_SetUpdateMode">
        <CallTarget Targets="CreateUpdateTodoList"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_BackupConfigurationFiles"
                    ContinueOnError="ErrorAndContinue" />
    </Target>


    <Target Name="_InitUpdateOrReleaseConditions">
        <PropertyGroup>
            <AdminToolUpdate>False</AdminToolUpdate>
            <AdminToolUpdate Condition="'$(AdminToolRelease)'=='True' OR '$(AdminToolMinorUpdate)'=='True'">True</AdminToolUpdate>
            <SmartConnectMinorUpdateOrRelease>False</SmartConnectMinorUpdateOrRelease>
            <SmartConnectMinorUpdateOrRelease Condition="('$(SmartConnectRelease)'=='True' OR '$(SmartConnectMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</SmartConnectMinorUpdateOrRelease>
            <PrinterMinorUpdateOrRelease>False</PrinterMinorUpdateOrRelease>
            <PrinterMinorUpdateOrRelease Condition="('$(PrinterRelease)'=='True' OR '$(PrinterMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</PrinterMinorUpdateOrRelease>
            <C2OutlookUpdate>False</C2OutlookUpdate>
            <C2OutlookUpdate Condition="'$(C2OutlookRelease)'=='True' OR '$(C2OutlookMinorUpdate)'=='True'">True</C2OutlookUpdate>
            <ClientOCRMinorUpdateOrRelease>False</ClientOCRMinorUpdateOrRelease>
            <ClientOCRMinorUpdateOrRelease Condition="('$(ClientOCRRelease)'=='True' OR '$(ClientOCRMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</ClientOCRMinorUpdateOrRelease>
            <ImportMinorUpdateOrRelease>False</ImportMinorUpdateOrRelease>
            <ImportMinorUpdateOrRelease Condition="('$(ImportRelease)'=='True' OR '$(ImportMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</ImportMinorUpdateOrRelease>
            <EditSendMinorUpdateOrRelease>False</EditSendMinorUpdateOrRelease>
            <EditSendMinorUpdateOrRelease Condition="('$(EditSendRelease)'=='True' OR '$(EditSendMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</EditSendMinorUpdateOrRelease>
            <ScannerSendMinorUpdateOrRelease>False</ScannerSendMinorUpdateOrRelease>
            <ScannerSendMinorUpdateOrRelease Condition="('$(ScannerRelease)'=='True' OR '$(ScannerMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</ScannerSendMinorUpdateOrRelease>
            <ExportMinorUpdateOrRelease>False</ExportMinorUpdateOrRelease>
            <ExportMinorUpdateOrRelease Condition="('$(ExportRelease)'=='True' OR '$(ExportMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</ExportMinorUpdateOrRelease>
            <WECMinorUpdateOrRelease>False</WECMinorUpdateOrRelease>
            <WECMinorUpdateOrRelease Condition="('$(WECRelease)'=='True' OR '$(WECMinorUpdate)'=='True')  AND '$(IsBackgroundUpdate)'!='True'">True</WECMinorUpdateOrRelease>
            <WECServerMinorUpdateOrRelease>False</WECServerMinorUpdateOrRelease>
            <WECServerMinorUpdateOrRelease Condition="('$(WECServerRelease)'=='True' OR '$(WECServerMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</WECServerMinorUpdateOrRelease>
            <UpdateMinorUpdateOrRelease>False</UpdateMinorUpdateOrRelease>
            <UpdateMinorUpdateOrRelease Condition="'$(UpdateRelease)'=='True' OR '$(UpdateMinorUpdate)'=='True'">True</UpdateMinorUpdateOrRelease>
            <WorkFlowDesignerUpdate>False</WorkFlowDesignerUpdate>
            <WorkFlowDesignerUpdate Condition="'$(WorkflowDesignerRelease)'=='True' OR '$(WorkflowDesignerMinorUpdate)'=='True'">True</WorkFlowDesignerUpdate>
            <UrlCreationUpdate>False</UrlCreationUpdate>
            <UrlCreationUpdate Condition="'$(UrlCreatorRelease)'=='True' OR '$(UrlCreatorMinorUpdate)'=='True'">True</UrlCreationUpdate>
            <LocalDataConnectorMinorUpdateOrRelease>False</LocalDataConnectorMinorUpdateOrRelease>
            <LocalDataConnectorMinorUpdateOrRelease Condition="('$(LocalDataConnectorRelease)'=='True' OR '$(LocalDataConnectorMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</LocalDataConnectorMinorUpdateOrRelease>
            <UserSynchronizationUpdate>False</UserSynchronizationUpdate>
            <UserSynchronizationUpdate Condition="'$(UserSynchronizationRelease)'=='True' OR '$(UserSynchronizationMinorUpdate)'=='True'">True</UserSynchronizationUpdate>
            <DesktopMinorUpdateOrRelease>False</DesktopMinorUpdateOrRelease>
            <DesktopMinorUpdateOrRelease Condition="('$(DesktopFrameworkRelease)'=='True' OR '$(DesktopFrameworkMinorUpdate)'=='True') AND '$(IsBackgroundUpdate)'!='True'">True</DesktopMinorUpdateOrRelease>
        </PropertyGroup>

        <IsProcessRunning ProcessName="DocuWare.Administration" Condition="'$(IsBackgroundUpdate)'=='True' AND '$(AdminToolUpdate)'=='True'">
            <Output TaskParameter="IsRunning" PropertyName="AdminIsRunning" />
        </IsProcessRunning>
        <IsProcessRunning ProcessName="OUTLOOK" Condition="'$(IsBackgroundUpdate)'=='True' AND '$(C2OutlookUpdate)'=='True'">
            <Output TaskParameter="IsRunning" PropertyName="OutlookIsRunning" />
        </IsProcessRunning>
        <IsProcessRunning ProcessName="DocuWare.URLCreator" Condition="'$(IsBackgroundUpdate)'=='True' AND '$(UrlCreationUpdate)'=='True'">
            <Output TaskParameter="IsRunning" PropertyName="UrlCreatorIsRunning" />
        </IsProcessRunning>
        <IsProcessRunning ProcessName="DocuWare.ADSync" Condition="'$(IsBackgroundUpdate)'=='True' AND '$(UserSynchronizationUpdate)'=='True'">
            <Output TaskParameter="IsRunning" PropertyName="UserSynchronizationIsRunning" />
        </IsProcessRunning>
        <IsProcessRunning ProcessName="DocuWare.WorkflowManager.Designer" Condition="'$(IsBackgroundUpdate)'=='True' AND '$(WorkFlowDesignerUpdate)'=='True'">
            <Output TaskParameter="IsRunning" PropertyName="WorkFlowDesignerIsRunning" />
        </IsProcessRunning>

        <PropertyGroup>
            <AdminToolMinorUpdateOrRelease>False</AdminToolMinorUpdateOrRelease>
            <AdminToolMinorUpdateOrRelease Condition="(('$(IsBackgroundUpdate)'=='True' AND '$(AdminIsRunning)'=='False') OR '$(IsBackgroundUpdate)'!='True') AND '$(AdminToolUpdate)'=='True'">True</AdminToolMinorUpdateOrRelease>
            <C2OutlookMinorUpdateOrRelease>False</C2OutlookMinorUpdateOrRelease>
            <C2OutlookMinorUpdateOrRelease Condition="(('$(IsBackgroundUpdate)'=='True' AND '$(OutlookIsRunning)'=='False') OR '$(IsBackgroundUpdate)'!='True') AND '$(C2OutlookUpdate)'=='True'">True</C2OutlookMinorUpdateOrRelease>
            <UrlCreationMinorUpdateOrRelease>False</UrlCreationMinorUpdateOrRelease>
            <UrlCreationMinorUpdateOrRelease Condition="(('$(IsBackgroundUpdate)'=='True' AND '$(UrlCreatorIsRunning)'=='False') OR '$(IsBackgroundUpdate)'!='True') AND '$(UrlCreationUpdate)'=='True'">True</UrlCreationMinorUpdateOrRelease>
            <UserSynchronizationMinorUpdateOrRelease>False</UserSynchronizationMinorUpdateOrRelease>
            <UserSynchronizationMinorUpdateOrRelease Condition="(('$(IsBackgroundUpdate)'=='True' AND '$(UserSynchronizationIsRunning)'=='False') OR '$(IsBackgroundUpdate)'!='True') AND '$(UserSynchronizationUpdate)'=='True'">True</UserSynchronizationMinorUpdateOrRelease>
            <WorkFlowDesignerMinorUpdateOrRelease>False</WorkFlowDesignerMinorUpdateOrRelease>
            <WorkFlowDesignerMinorUpdateOrRelease Condition="(('$(IsBackgroundUpdate)'=='True' AND '$(WorkFlowDesignerIsRunning)'=='False') OR '$(IsBackgroundUpdate)'!='True') AND '$(WorkFlowDesignerUpdate)'=='True'">True</WorkFlowDesignerMinorUpdateOrRelease>
        </PropertyGroup>
    </Target>

    <Target Name="_InitInstallConditions" DependsOnTargets="_InitUpdateOrReleaseConditions">
        <PropertyGroup>
            <AdminToolInstall>False</AdminToolInstall>
            <AdminToolInstall Condition="('$(AdminTool)'=='True' AND '$(CurrentInstallStateAdminTool)'=='False') OR '$(AdminToolMinorUpdateOrRelease)'=='True'">True</AdminToolInstall>
            <SmartConnectInstall>False</SmartConnectInstall>
            <SmartConnectInstall Condition="('$(SmartConnect)'=='True' AND '$(CurrentInstallStateSmartConnect)'=='False') OR '$(SmartConnectMinorUpdateOrRelease)'=='True'">True</SmartConnectInstall>
            <PrinterInstall>False</PrinterInstall>
            <PrinterInstall Condition="('$(Printer)'=='True' AND '$(CurrentInstallStatePrinter)'=='False') OR '$(PrinterMinorUpdateOrRelease)'=='True'">True</PrinterInstall>
            <C2OutlookInstall>False</C2OutlookInstall>
            <C2OutlookInstall Condition="('$(C2Outlook)'=='True' AND '$(CurrentInstallStateC2Outlook)'=='False') OR '$(C2OutlookMinorUpdateOrRelease)'=='True'">True</C2OutlookInstall>
            <ClientOCRInstall>False</ClientOCRInstall>
            <ClientOCRInstall Condition="((('$(Import)'=='True' OR '$(Scanner)'=='True' OR '$(SmartConnect)'=='True' OR '$(Printer)'=='True' OR '$(C2Outlook)'=='True') AND '$(CurrentInstallStateClientOCR)'=='False') OR '$(ClientOCRMinorUpdateOrRelease)'=='True')">True</ClientOCRInstall>
            <ImportInstall>False</ImportInstall>
            <ImportInstall Condition="('$(Import)'=='True' AND '$(CurrentInstallStateImport)'=='False') OR '$(ImportMinorUpdateOrRelease)'=='True'">True</ImportInstall>
            <EditSendInstall>False</EditSendInstall>
            <EditSendInstall Condition="('$(EditSend)'=='True' AND '$(CurrentInstallStateEditSend)'=='False') OR '$(EditSendMinorUpdateOrRelease)'=='True'">True</EditSendInstall>
            <ScannerInstall>False</ScannerInstall>
            <ScannerInstall Condition="('$(Scanner)'=='True' AND '$(CurrentInstallStateScanner)'=='False') OR '$(ScannerSendMinorUpdateOrRelease)'=='True'">True</ScannerInstall>
            <ExportDownload>False</ExportDownload>
            <ExportDownload Condition="('$(Export)'=='True' AND '$(CurrentInstallStateExport)'=='False') OR '$(ExportMinorUpdateOrRelease)'=='True'">True</ExportDownload>
            <ExportInstall>False</ExportInstall>
            <ExportInstall Condition="'$(Export)'=='True' AND '$(CurrentInstallStateExport)'=='False'">True</ExportInstall>
            <WECInstall>False</WECInstall>
            <WECInstall Condition="('$(WEC)'=='True' AND '$(CurrentInstallStateWEC)'=='False') OR '$(WECMinorUpdateOrRelease)'=='True'">True</WECInstall>
            <WECServerInstall>False</WECServerInstall>
            <WECServerInstall Condition="('$(WECServer)'=='True' AND '$(CurrentInstallStateWECServer)'=='False') OR '$(WECServerMinorUpdateOrRelease)'=='True'">True</WECServerInstall>
            <UpdateInstall>False</UpdateInstall>
            <UpdateInstall Condition="('$(Update)'=='True' AND '$(CurrentInstallStateUpdate)'=='False') OR '$(UpdateMinorUpdateOrRelease)'=='True'">True</UpdateInstall>
            <WorkFlowDesignerInstall>False</WorkFlowDesignerInstall>
            <WorkFlowDesignerInstall Condition="('$(WorkflowDesigner)'=='True' AND '$(CurrentInstallStateWorkflowDesigner)'=='False') OR '$(WorkFlowDesignerMinorUpdateOrRelease)'=='True'">True</WorkFlowDesignerInstall>
            <UrlCreationInstall>False</UrlCreationInstall>
            <UrlCreationInstall Condition="('$(UrlCreator)'=='True' AND '$(CurrentInstallStateUrlCreator)'=='False') OR '$(UrlCreationMinorUpdateOrRelease)'=='True'">True</UrlCreationInstall>
            <LocalDataConnectorInstall>False</LocalDataConnectorInstall>
            <LocalDataConnectorInstall Condition="('$(LocalDataConnector)'=='True' AND '$(CurrentInstallStateLocalDataConnector)'=='False') OR '$(LocalDataConnectorMinorUpdateOrRelease)'=='True'">True</LocalDataConnectorInstall>
            <UserSynchronizationInstall>False</UserSynchronizationInstall>
            <UserSynchronizationInstall Condition="('$(UserSynchronization)'=='True' AND '$(CurrentInstallStateUserSynchronization)'=='False') OR '$(UserSynchronizationMinorUpdateOrRelease)'=='True'">True</UserSynchronizationInstall>
            <DesktopInstall>False</DesktopInstall>
            <DesktopInstall Condition="(('$(C2Outlook)'=='True' 
                      OR '$(EditSend)'=='True' 
                      OR '$(AdminTool)'=='True' 
                      OR '$(Export)'=='True' 
                      OR '$(Import)'=='True'
                      OR '$(Scanner)'=='True' 
                      OR '$(SmartConnect)'=='True' 
                      OR '$(Printer)'=='True' 
                      OR '$(WEC)'=='True' 
                      OR '$(WorkflowDesigner)'=='True') 
                      AND '$(CurrentInstallStateDesktopFramework)'=='False' AND '$(UpdateMode)'!='True') OR '$(DesktopMinorUpdateOrRelease)'=='True'">True</DesktopInstall>
        </PropertyGroup>
    </Target>

    <Target Name="_InitStopAndUninstallConditions" DependsOnTargets="_InitUpdateOrReleaseConditions">
        <PropertyGroup>
            <SmartConnectStopAndUninstall>False</SmartConnectStopAndUninstall>
            <SmartConnectStopAndUninstall Condition="('$(SmartConnect)'=='False' AND '$(CurrentInstallStateSmartConnect)'=='True' AND '$(UpdateMode)'!='True') OR '$(SmartConnectMinorUpdateOrRelease)'=='True'">True</SmartConnectStopAndUninstall>
            <PrinterStopAndUninstall>False</PrinterStopAndUninstall>
            <PrinterStopAndUninstall Condition="('$(Printer)'=='False' AND '$(CurrentInstallStatePrinter)'=='True' AND '$(UpdateMode)'!='True') OR '$(PrinterMinorUpdateOrRelease)'=='True'">True</PrinterStopAndUninstall>
            <C2OutlookStopAndUninstall>False</C2OutlookStopAndUninstall>
            <C2OutlookStopAndUninstall Condition="('$(C2Outlook)'=='False' AND '$(CurrentInstallStateC2Outlook)'=='True' AND '$(UpdateMode)'!='True') OR '$(C2OutlookMinorUpdateOrRelease)'=='True'">True</C2OutlookStopAndUninstall>
            <AdminToolStopAndUninstall>False</AdminToolStopAndUninstall>
            <AdminToolStopAndUninstall Condition="('$(AdminTool)'=='False' AND '$(CurrentInstallStateAdminTool)'=='True' AND '$(UpdateMode)'!='True') OR '$(AdminToolMinorUpdateOrRelease)'=='True'">True</AdminToolStopAndUninstall>
            <ImportStopAndUninstall>False</ImportStopAndUninstall>
            <ImportStopAndUninstall Condition="('$(Import)'=='False' AND '$(CurrentInstallStateImport)'=='True' AND '$(UpdateMode)'!='True') OR '$(ImportMinorUpdateOrRelease)'=='True'">True</ImportStopAndUninstall>
            <EditSendStopAndUninstall>False</EditSendStopAndUninstall>
            <EditSendStopAndUninstall Condition="('$(EditSend)'=='False' AND '$(CurrentInstallStateEditSend)'=='True' AND '$(UpdateMode)'!='True') OR '$(EditSendMinorUpdateOrRelease)'=='True'">True</EditSendStopAndUninstall>
            <ScannerStopAndUninstall>False</ScannerStopAndUninstall>
            <ScannerStopAndUninstall Condition="('$(Scanner)'=='False' AND '$(CurrentInstallStateScanner)'=='True' AND '$(UpdateMode)'!='True') OR '$(ScannerSendMinorUpdateOrRelease)'=='True'">True</ScannerStopAndUninstall>
            <WECStopAndUninstall>False</WECStopAndUninstall>
            <WECStopAndUninstall Condition="('$(WEC)'=='False' AND '$(CurrentInstallStateWEC)'=='True' AND '$(UpdateMode)'!='True') OR '$(WECMinorUpdateOrRelease)'=='True'">True</WECStopAndUninstall>
            <WECServerStopAndUninstall>False</WECServerStopAndUninstall>
            <WECServerStopAndUninstall Condition="('$(WECServer)'=='False' AND '$(CurrentInstallStateWECServer)'=='True' AND '$(UpdateMode)'!='True') OR '$(WECServerMinorUpdateOrRelease)'=='True'">True</WECServerStopAndUninstall>
            <WorkFlowDesignerStopAndUninstall>False</WorkFlowDesignerStopAndUninstall>
            <WorkFlowDesignerStopAndUninstall Condition="('$(WorkflowDesigner)'=='False' AND '$(CurrentInstallStateWorkflowDesigner)'=='True' AND '$(UpdateMode)'!='True') OR '$(WorkFlowDesignerMinorUpdateOrRelease)'=='True'">True</WorkFlowDesignerStopAndUninstall>
            <UrlCreationStopAndUninstall>False</UrlCreationStopAndUninstall>
            <UrlCreationStopAndUninstall Condition="('$(UrlCreator)'=='False' AND '$(CurrentInstallStateUrlCreator)'=='True' AND '$(UpdateMode)'!='True') OR '$(UrlCreationMinorUpdateOrRelease)'=='True'">True</UrlCreationStopAndUninstall>
            <LocalDataConnectorStopAndUninstall>False</LocalDataConnectorStopAndUninstall>
            <LocalDataConnectorStopAndUninstall Condition="('$(LocalDataConnector)'=='False' AND '$(CurrentInstallStateLocalDataConnector)'=='True' AND '$(UpdateMode)'!='True') OR '$(LocalDataConnectorMinorUpdateOrRelease)'=='True'">True</LocalDataConnectorStopAndUninstall>
            <UserSynchronizationStopAndUninstall>False</UserSynchronizationStopAndUninstall>
            <UserSynchronizationStopAndUninstall Condition="('$(UserSynchronization)'=='False' AND '$(CurrentInstallStateUserSynchronization)'=='True' AND '$(UpdateMode)'!='True') OR '$(UserSynchronizationMinorUpdateOrRelease)'=='True'">True</UserSynchronizationStopAndUninstall>

            <ClientOCRStop>False</ClientOCRStop>
            <ClientOCRStop Condition="(('$(Import)'=='False' AND '$(Scanner)'=='False' AND '$(SmartConnect)'=='False' AND '$(Printer)'=='False' AND '$(C2Outlook)'=='False') AND ('$(CurrentInstallStateClientOCR)'=='True' AND '$(UpdateMode)'!='True')) OR '$(ClientOCRMinorUpdateOrRelease)'=='True'">True</ClientOCRStop>
            <OutlookStop>False</OutlookStop>
            <OutlookStop Condition="('$(C2Outlook)'=='True' AND '$(CurrentInstallStateC2Outlook)'=='False' AND '$(UpdateMode)'!='True') OR '$(C2OutlookStopAndUninstall)'=='True'">True</OutlookStop>
            <DesktopStop>False</DesktopStop>
            <DesktopStop Condition="('$(CurrentInstallStateDesktopFramework)'=='True'
                AND (('$(EditSend)'=='True' AND '$(CurrentInstallStateEditSend)'=='False') OR '$(EditSendStopAndUninstall)'=='True'
                OR ('$(Scanner)'=='True' AND '$(CurrentInstallStateScanner)'=='False') OR '$(ScannerStopAndUninstall)'=='True'
                OR ('$(Printer)'=='True' AND '$(CurrentInstallStatePrinter)'=='False') OR '$(PrinterStopAndUninstall)'=='True'
                OR ('$(SmartConnect)'=='True' AND '$(CurrentInstallStateSmartConnect)'=='False') OR '$(SmartConnectStopAndUninstall)'=='True'
                OR ('$(DesktopMinorUpdateOrRelease)'=='True')))"
                >True</DesktopStop>

            <ExportStopAndUninstall>False</ExportStopAndUninstall>
            <ExportStopAndUninstall Condition="(('$(Export)'=='False' AND '$(CurrentInstallStateExport)'=='True' AND '$(UpdateMode)'!='True') OR '$(ExportMinorUpdateOrRelease)'=='True')">True</ExportStopAndUninstall>

            <DesktopUninstall>False</DesktopUninstall>
            <DesktopUninstall Condition="('$(DesktopFramework)'=='False') OR ('$(DesktopFrameworkRelease)'=='True' OR '$(DesktopFrameworkMinorUpdate)'=='True')">True</DesktopUninstall>
            <ClientOCRUninstall>False</ClientOCRUninstall>
            <ClientOCRUninstall Condition="('$(ClientOCR)'=='False' AND '$(CurrentInstallStateClientOCR)'=='True') OR '$(ClientOCRMinorUpdateOrRelease)'=='True'">True</ClientOCRUninstall>
            <UpdateUninstall>False</UpdateUninstall>
            <UpdateUninstall Condition="(((('$(C2Outlook)'=='False' 
                     AND '$(EditSend)'=='False'  
                     AND '$(AdminTool)'=='False' 
                     AND '$(Export)'=='False' 
                     AND '$(Import)'=='False' 
                     AND '$(Scanner)'=='False' 
                     AND '$(SmartConnect)'=='False' 
                     AND '$(Printer)'=='False' 
                     AND '$(WEC)'=='False' 
                     AND '$(WorkflowDesigner)'=='False' 
                     AND '$(UrlCreator)'=='False' 
                     AND '$(LocalDataConnector)'=='False' 
                     AND '$(UserSynchronization)'=='False') 
                     AND ('$(CurrentInstallStateUpdate)'=='True') AND '$(UpdateMode)'!='True'))) OR '$(UpdateMinorUpdateOrRelease)'=='True'">True</UpdateUninstall>
        </PropertyGroup>
    </Target>
    
    <Target Name="_SetCRuntimeV10x86InstallSuccessToFalse">
        <PropertyGroup>
            <CRuntimeV10x86InstallSuccess>False</CRuntimeV10x86InstallSuccess>
        </PropertyGroup>
    </Target>
    <Target Name="_SetCRuntimeV10x64InstallSuccessToFalse">
        <PropertyGroup>
            <CRuntimeV10x64InstallSuccess>False</CRuntimeV10x64InstallSuccess>
        </PropertyGroup>
    </Target>
    <Target Name="_SetCRuntimeV14x86InstallSuccessToFalse">
        <PropertyGroup>
            <CRuntimeV14x86InstallSuccess>False</CRuntimeV14x86InstallSuccess>
        </PropertyGroup>
    </Target>
    <Target Name="_SetWinRuntimex64InstallSuccessToFalse">
        <PropertyGroup>
            <WinRuntimex64InstallSuccess>False</WinRuntimex64InstallSuccess>
        </PropertyGroup>
    </Target>
    <Target Name="_SetWinRuntimex86InstallSuccessToFalse">
        <PropertyGroup>
            <WinRuntimex86InstallSuccess>False</WinRuntimex86InstallSuccess>
        </PropertyGroup>
    </Target>
    <Target Name="_SetAspNetCoreRuntimex86InstallSuccessToFalse">
        <PropertyGroup>
            <AspNetCoreRuntimex86InstallSuccess>False</AspNetCoreRuntimex86InstallSuccess>
        </PropertyGroup>
    </Target>
    <Target Name="_SetNETCoreRuntimex86InstallSuccessToFalse">
        <PropertyGroup>
            <NETCoreRuntimex86InstallSuccess>False</NETCoreRuntimex86InstallSuccess>
        </PropertyGroup>
    </Target>
    <Target Name="_SetWebView2Runtimex64InstallSuccessToFalse">
        <PropertyGroup>
            <WebView2Runtimex64InstallSuccess>False</WebView2Runtimex64InstallSuccess>
        </PropertyGroup>
    </Target>
    <Target Name="_SetWebView2Runtimex86InstallSuccessToFalse">
        <PropertyGroup>
            <WebView2Runtimex86InstallSuccess>False</WebView2Runtimex86InstallSuccess>
        </PropertyGroup>
    </Target>

    <Target Name="Phase_Download" DependsOnTargets="_InitInstallConditions">
        <CallTarget Targets="DownloadCRuntimeV10x86"
                     Condition="(('$(SmartConnectInstall)'=='True' 
                    OR '$(PrinterInstall)'=='True' 
                    OR '$(C2OutlookInstall)'=='True') 
                    AND '$(VCredist10x86InstallNeeded)'=='True')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetCRuntimeV10x86InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadCRuntimeV10x64"
                    Condition="(('$(SmartConnectInstall)'=='True' 
                    OR '$(PrinterInstall)'=='True') 
                    AND '$(Is64bitOS)'=='True' 
                    AND '$(VCredist10x64InstallNeeded)'=='True')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetCRuntimeV10x64InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadCRuntimeV14x86"
                    Condition="(('$(AdminToolInstall)'=='True' 
                    OR '$(SmartConnectInstall)'=='True' 
                    OR '$(ImportInstall)'=='True' 
                    OR '$(ScannerInstall)'=='True' 
                    OR '$(SmartConnectInstall)'=='True' 
                    OR '$(PrinterInstall)'=='True' 
                    OR '$(C2OutlookInstall)'=='True') 
                    AND '$(VCredist14x86InstallNeeded)'=='True')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetCRuntimeV14x86InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadWinRuntimex64"
                    Condition="('$(WECInstall)'=='True' AND '$(Is64bitOS)'=='True') AND ('$(IsInstalledVersionHigherOrEqualDownloadWinRuntimex64)'=='False') "
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadWinRuntimex86"
                    Condition="(('$(WECInstall)'=='True' AND '$(Is64bitOS)'=='False') OR ('$(LocalDataConnectorInstall)'=='True')) 
                    AND ('$(IsInstalledVersionHigherOrEqualDownloadWinRuntimex86)'=='False' OR '$(IsInstalledVersionHigherOrEqualDownloadNETCoreRuntimex86)'=='False' OR '$(IsInstalledVersionHigherOrEqualDownloadAspNetCoreRuntimex86)'=='False')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadWebView2Runtimex64"
                    Condition="(('$(WECInstall)'=='True' 
                    OR '$(C2OutlookInstall)'=='True' 
                    OR '$(WorkFlowDesignerInstall)'=='True')
                    AND '$(Is64bitOS)'=='True') 
                    AND '$(IsInstalledVersionHigherOrEqualDownloadWebView2Runtimex64)'=='False'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetWebView2Runtimex64InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadWebView2Runtimex86"
                    Condition="(('$(WECInstall)'=='True' 
                    OR '$(C2OutlookInstall)'=='True' 
                    OR '$(WorkFlowDesignerInstall)'=='True')
                    AND '$(Is64bitOS)'=='False') 
                    AND '$(IsInstalledVersionHigherOrEqualDownloadWebView2Runtimex86)'=='False'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetWebView2Runtimex86InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadUpdate"
                    Condition="$(UpdateInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadDesktopFramework"
                    Condition="$(DesktopInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadExport"
                    Condition="$(ExportDownload)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadClientOCR"
                    Condition="$(ClientOCRInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadC2Outlook"
                    Condition="$(C2OutlookInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadEditSend"
                    Condition="$(EditSendInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadAdminTool"
                    Condition="$(AdminToolInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadScanner"
                    Condition="$(ScannerInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadImport"
                    Condition="$(ImportInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadPrinter"
                    Condition="$(PrinterInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadSmartConnect"
                    Condition="$(SmartConnectInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadWEC"
                    Condition="$(WECInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadWECServer"
                    Condition="$(WECServerInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadWorkflowDesigner"
                    Condition="$(WorkFlowDesignerInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadUrlCreator"
                    Condition="$(UrlCreationInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadLocalDataConnector"
                    Condition="$(LocalDataConnectorInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="DownloadUserSynchronization"
                    Condition="$(UserSynchronizationInstall)"
                    ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="Phase_Install" DependsOnTargets="_InitInstallConditions">
        <CallTarget Targets="InstallCRuntimeV10x86"
                    Condition="('$(SmartConnectInstall)'=='True' 
                    OR '$(PrinterInstall)'=='True' 
                    OR '$(C2OutlookInstall)'=='True') 
                    AND '$(VCredist10x86InstallNeeded)'=='True'
                    AND '$(CRuntimeV10x86InstallSuccess)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetCRuntimeV10x86InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallCRuntimeV10x64"
                    Condition="('$(SmartConnectInstall)'=='True' 
                    OR '$(PrinterInstall)'=='True') 
                    AND '$(Is64bitOS)'=='True' 
                    AND '$(VCredist10x64InstallNeeded)'=='True'
                    AND '$(CRuntimeV10x64InstallSuccess)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetCRuntimeV10x64InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallCRuntimeV14x86"
                    Condition="('$(AdminToolInstall)'=='True' 
                    OR '$(ImportInstall)'=='True' 
                    OR '$(ScannerInstall)'=='True' 
                    OR '$(SmartConnectInstall)'=='True' 
                    OR '$(PrinterInstall)'=='True' 
                    OR '$(C2OutlookInstall)'=='True') 
                    AND '$(VCredist14x86InstallNeeded)'=='True'
                    AND '$(CRuntimeV14x86InstallSuccess)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetCRuntimeV14x86InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallWinRuntimex64"
                    Condition="('$(WECInstall)'=='True' AND '$(Is64bitOS)'=='True') 
                    AND ('$(IsInstalledVersionHigherOrEqualDownloadWinRuntimex64)'=='False')
                    AND '$(WinRuntimex64InstallSuccess)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallWinRuntimex86"
                    Condition="(('$(WECInstall)'=='True' AND '$(Is64bitOS)'=='False') OR ('$(LocalDataConnectorInstall)'=='True'))
                    AND ('$(IsInstalledVersionHigherOrEqualDownloadWinRuntimex86)'=='False' OR '$(IsInstalledVersionHigherOrEqualDownloadNETCoreRuntimex86)'=='False' OR '$(IsInstalledVersionHigherOrEqualDownloadAspNetCoreRuntimex86)'=='False')
                    AND ('$(WinRuntimex86InstallSuccess)'=='True' OR '$(AspNetCoreRuntimex86InstallSuccess)'=='True' OR '$(NETCoreRuntimex86InstallSuccess)'=='True')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallWebView2Runtimex64"
                    Condition="(('$(WECInstall)'=='True' 
                    OR '$(C2OutlookInstall)'=='True' 
                    OR '$(WorkFlowDesignerInstall)'=='True') 
                    AND '$(Is64bitOS)'=='True') 
                    AND '$(IsInstalledVersionHigherOrEqualDownloadWebView2Runtimex64)'=='False'
                    AND '$(WebView2Runtimex64InstallSuccess)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetWebView2Runtimex64InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallWebView2Runtimex86"
                    Condition="(('$(WECInstall)'=='True' 
                    OR '$(C2OutlookInstall)'=='True' 
                    OR '$(WorkFlowDesignerInstall)'=='True')
                    AND '$(Is64bitOS)'=='False') 
                    AND '$(IsInstalledVersionHigherOrEqualDownloadWebView2Runtimex86)'=='False'
                    AND '$(WebView2Runtimex86InstallSuccess)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetWebView2Runtimex86InstallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallUpdate"
                    Condition="$(UpdateInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallDesktopFramework"
                    Condition="$(DesktopInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallClientOCR"
                    Condition="$(ClientOCRInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallC2Outlook"
                    Condition="$(C2OutlookInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallEditSend"
                    Condition="$(EditSendInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallAdminTool"
                    Condition="$(AdminToolInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallScanner"
                    Condition="$(ScannerInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallExport"
                    Condition="$(ExportInstall) OR ('$(ExportMinorUpdateOrRelease)'=='True' AND '$(ExportIsRunning)'=='False')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallImport"
                    Condition="$(ImportInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallPrinter"
                    Condition="$(PrinterInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallSmartConnect"
                    Condition="$(SmartConnectInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallWEC"
                    Condition="$(WECInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallWECServer"
                    Condition="$(WECServerInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallWorkflowDesigner"
                    Condition="$(WorkFlowDesignerInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallUrlCreator"
                    Condition="$(UrlCreationInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallLocalDataConnector"
                    Condition="$(LocalDataConnectorInstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="InstallUserSynchronization"
                    Condition="$(UserSynchronizationInstall)"
                    ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="Phase_OfflineUninstall" DependsOnTargets="_InitStopAndUninstallConditions">
        <CallTarget Targets="StopDWClientUpdateService"
                    Condition="('$(CurrentInstallStateUpdate)'=='True')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopUpdate"
                    Condition="'$(CurrentInstallStateUpdate)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopDesktop"
                    Condition="$(DesktopStop)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopLocalDataConnector"
                    Condition="$(LocalDataConnectorStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopExport"
                    Condition="$(ExportStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopAdministration"
                    Condition="$(AdminToolStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopWindowsExplorerClient"
                    Condition="$(WECStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopWindowsExplorerClientServer"
                    Condition="$(WECServerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopConnectToOutlook"
                    Condition="$(OutlookStop)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopOCR"
                    Condition="$(ClientOCRStop)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopUrlCreator"
                    Condition="$(UrlCreationStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopUserSynchronization"
                    Condition="$(UserSynchronizationStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopWorkflowDesigner"
                    Condition="$(WorkFlowDesignerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallC2Outlook"
                    Condition="$(C2OutlookStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallEditSend"
                    Condition="$(EditSendStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallAdminTool"
                    Condition="$(AdminToolStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallScanner"
                    Condition="$(ScannerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallExport"
                    Condition="$(ExportStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallImport"
                    Condition="$(ImportStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallPrinter"
                    Condition="$(PrinterStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallSmartConnect"
                    Condition="$(SmartConnectStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallWEC"
                    Condition="$(WECStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallWECServer"
                    Condition="$(WECServerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallWorkflowDesigner"
                    Condition="$(WorkFlowDesignerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallUrlCreator"
                    Condition="$(UrlCreationStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallLocalDataConnector"
                    Condition="$(LocalDataConnectorStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallUserSynchronization"
                    Condition="$(UserSynchronizationStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallClientOCR"
                    Condition="$(ClientOCRUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallDesktopFramework"
                    Condition="$(DesktopUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallUpdate"
                    Condition="$(UpdateUninstall)"
                    ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="Phase_Uninstall" DependsOnTargets="_InitStopAndUninstallConditions">
        <CallTarget Targets="UninstallC2Outlook"
                    Condition="$(C2OutlookStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallEditSend"
                    Condition="$(EditSendStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallAdminTool"
                    Condition="$(AdminToolStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallScanner"
                    Condition="$(ScannerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallExport"
                    Condition="$(ExportStopAndUninstall) AND ('$(ExportIsRunning)'=='False')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallImport"
                    Condition="$(ImportStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallPrinter"
                    Condition="$(PrinterStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallSmartConnect"
                    Condition="$(SmartConnectStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallWEC"
                    Condition="$(WECStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallWECServer"
                    Condition="$(WECServerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallWorkflowDesigner"
                    Condition="$(WorkFlowDesignerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallUrlCreator"
                    Condition="$(UrlCreationStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallLocalDataConnector"
                    Condition="$(LocalDataConnectorStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallUserSynchronization"
                    Condition="$(UserSynchronizationStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallClientOCR"
                    Condition="$(ClientOCRUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallDesktopFramework"
                    Condition="$(DesktopUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="UninstallUpdate"
                    Condition="$(UpdateUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <!-- TEST Condition! -->
    </Target>

    <Target Name="Phase_Stop" DependsOnTargets="_InitStopAndUninstallConditions">
        <CallTarget Targets="StopDWClientUpdateService"
                    Condition="('$(CurrentInstallStateUpdate)'=='True')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopUpdate"
                    Condition="'$(CurrentInstallStateUpdate)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopDesktop"
                    Condition="$(DesktopStop)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopLocalDataConnector"
                    Condition="$(LocalDataConnectorStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopExport"
                    Condition="$(ExportStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopAdministration"
                    Condition="$(AdminToolStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopWindowsExplorerClient"
                    Condition="$(WECStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopWindowsExplorerClientServer"
                    Condition="$(WECServerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopConnectToOutlook"
                    Condition="$(OutlookStop)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopOCR"
                    Condition="$(ClientOCRStop)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopUrlCreator"
                    Condition="$(UrlCreationStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopUserSynchronization"
                    Condition="$(UserSynchronizationStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StopWorkflowDesigner"
                    Condition="$(WorkFlowDesignerStopAndUninstall)"
                    ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="Phase_Start">
        <ModuleIsInstalled UpgradeCode="{D11AB4FD-B244-4F29-AC0B-4C134D190220}" ContinueOnError="ErrorAndContinue">
            <Output TaskParameter="IsInstalled" PropertyName="DesktopStillInstalled" />
        </ModuleIsInstalled>
        <CallTarget Targets="StartDesktop"
                    Condition="(('$(EditSend)'=='True' AND '$(CurrentInstallStateEditSend)'=='False') 
                    OR (('$(EditSend)'=='False' AND '$(CurrentInstallStateEditSend)'=='True' 
                    AND '$(UpdateMode)'!='True') AND ('$(DesktopStillInstalled)'=='True')) 
                    OR ('$(EditSendRelease)'=='True' OR '$(EditSendMinorUpdate)'=='True') 
                    OR ('$(Scanner)'=='True' AND '$(CurrentInstallStateScanner)'=='False') 
                    OR (('$(Scanner)'=='False' AND '$(CurrentInstallStateScanner)'=='True' 
                    AND '$(UpdateMode)'!='True') AND ('$(DesktopStillInstalled)'=='True')) 
                    OR ('$(ScannerRelease)'=='True' OR '$(ScannerMinorUpdate)'=='True') 
                    OR ('$(Import)'=='True' AND '$(CurrentInstallStateImport)'=='False') 
                    OR (('$(Import)'=='False' AND '$(CurrentInstallStateImport)'=='True' 
                    AND '$(UpdateMode)'!='True') AND ('$(DesktopStillInstalled)'=='True')) 
                    OR ('$(ImportRelease)'=='True' OR '$(ImportMinorUpdate)'=='True') 
                    OR ('$(Printer)'=='True' AND '$(CurrentInstallStatePrinter)'=='False') 
                    OR (('$(Printer)'=='False' AND '$(CurrentInstallStatePrinter)'=='True' 
                    AND '$(UpdateMode)'!='True') AND ('$(DesktopStillInstalled)'=='True')) 
                    OR ('$(PrinterRelease)'=='True' OR '$(PrinterMinorUpdate)'=='True') 
                    OR ('$(SmartConnect)'=='True' AND '$(CurrentInstallStateSmartConnect)'=='False') 
                    OR (('$(SmartConnect)'=='False' AND '$(CurrentInstallStateSmartConnect)'=='True' 
                    AND '$(UpdateMode)'!='True') AND ('$(DesktopStillInstalled)'=='True')) 
                    OR ('$(SmartConnectRelease)'=='True' OR '$(SmartConnectMinorUpdate)'=='True') 
                    OR ('$(DesktopFrameworkRelease)'=='True' OR '$(DesktopFrameworkMinorUpdate)'=='True'))"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StartLocalDataConnector"
                    Condition="('$(LocalDataConnector)'=='True' AND '$(CurrentInstallStateLocalDataConnector)'=='False' AND '$(UpdateMode)'!='True') OR ('$(LocalDataConnectorRelease)'=='True' OR '$(LocalDataConnectorMinorUpdate)'=='True')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="StartDWClientUpdateService"
                    Condition="'$(IsTerminalServer)'=='False' AND (('$(BundleUpdate)'=='False' AND '$(Update)'=='True') OR '$(BundleUpdate)'!='False')"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_EnableUpdate"
                    Condition="('$(Update)'=='True' AND '$(CurrentInstallStateUpdate)'=='False' AND '$(UpdateMode)'!='True') OR ('$(CurrentInstallStateUpdate)'=='True' AND '$(UpdateMode)'=='True')"
                    ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="Phase_Postprocessing">
        <CallTarget Targets="CleanUpDownloadDirectory"
                    Condition="'$(OverallSuccess)'=='True'"
                    ContinueOnError="ErrorAndContinue" />
        <Message Text="Cleanup of download directory was not done because of at least one error during execution." Condition="'$(OverallSuccess)'=='False'" />
    </Target>

    <Target Name="_SetOverallSuccessToFalse">
        <PropertyGroup>
            <OverallSuccess>False</OverallSuccess>
        </PropertyGroup>
    </Target>

    <Target Name="Phase_SystemChange" DependsOnTargets="_CorrectInstallStateForFailedInstall">
        <CallTarget Targets="Phase_SystemPrepare"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Download"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Stop"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Uninstall"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Install"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Start"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Postprocessing"
                    ContinueOnError="ErrorAndContinue" />
    </Target>

    <Target Name="Phase_SystemUpdate">
        <CallTarget Targets="Phase_SystemPrepare"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_UpdatePrepare"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Download"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Stop"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Uninstall"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Install"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Start"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="_SetOverallSuccessToFalse"
                    Condition="'$(MSBuildLastTaskResult)'=='false'"
                    ContinueOnError="ErrorAndContinue" />
        <CallTarget Targets="Phase_Postprocessing"
                    ContinueOnError="ErrorAndContinue" />
    </Target>

    <!--Add parameter for deployment type-->
    <Import Project="DeployMSI.proj"/>
    <Import Project="DownloadMSI.proj"/>
    <Import Project="Init.proj"/>

</Project>